{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KlipperScreen","text":"<p>KlipperScreen is a touchscreen GUI that interfaces with Klipper via Moonraker. It can switch between multiple printers to access them from a single location, and it doesn't even need to run on the same host, you can install it on another device and configure the IP address to access the printer.</p>"},{"location":"#required-hardware","title":"Required Hardware","text":"<p>KlipperScreen should run on any touchscreen that you can connect to a host (Raspberry, PC, Tablet), but not screens that connect directly to the printer MCU board.</p> <p>A physical touchscreen is not strictly required, for example you may install a remote desktop server like tigervnc-scraping-server and connect from a client device, check out the hardware page for further information.</p>"},{"location":"#sample-panels","title":"Sample Panels","text":"<p>Main Menu</p> <p></p> <p>Job Status</p> <p></p> <p>More</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>KlipperScreen was inspired by OctoScreen and the need for a touchscreen GUI that will natively work with Klipper and Moonraker.</p>"},{"location":"#about-the-project","title":"About the project","text":"<p>KlipperScreen has been created and maintained by Jordan Ruthe from 2020 to 2021</p> <p>Donate to Jordan: Patreon Ko-fi</p> <p>The current maintainer is Alfredo Monclus (alfrix) from 2021 onwards</p> <p>Donate to Alfredo: Ko-fi</p> <p>thanks to all the contributors who helped along the way.</p>"},{"location":"#sponsors","title":"Sponsors","text":"<p>Thank you LDO for sponsoring KlipperScreen and the open source community.</p> <p>Thanks  YUMI for sponsoring KlipperScreen and the open source community.</p>"},{"location":"Android/","title":"XServer-XSDL (Android Only)","text":"<p>This article describe how to use KlipperScreen from an Android device using XServer-XSDL</p> <p>Warning</p> <p>The experience may not be equal to run KlipperScreen natively. Depending on the device or the network you may encounter performance degradation or other issues.</p> <p>Bug</p> <p>This method may cause memory-leaks</p> <p>It's recommended that you use VNC instead or at least install earlyoom</p> <ol> <li> <p>First install KlipperScreen</p> </li> <li> <p>Download the apk of XServer-XSDL or ViewTouch from the official sourceforge.</p> <p>since it's no longer on the play store.</p> <p>With Android 4 you may have to use v1.11.40</p> </li> <li> <p>Install the app on the Android device</p> </li> <li> <p>Choose USB (ADB) or WI-FI</p> </li> </ol>"},{"location":"Android/#adb","title":"ADB","text":"<p>Warning</p> <p>Leaving the phone always connected it's not recommended, remove the battery to avoid issues.</p> <ol> <li>Install ADB on the computer/SBC/Pi with this command:     <pre><code>sudo apt-get install android-tools-adb\n</code></pre></li> <li> <p>Put your Android device in Debug mode.</p> <p>Usually it involves enabling developer mode and \"USB debugging\" the exact method varies on different vendors and versions of the device</p> <p>search \"how to enable Android debugging on device-model-and-brand\"</p> </li> <li> <p>Copy the sample launcher script with the following commands:</p> <pre><code>cd ~/KlipperScreen/scripts\ncp sample-android-adb.sh launch_KlipperScreen.sh\nchmod +x ~/KlipperScreen/scripts/launch_KlipperScreen.sh\n</code></pre> </li> <li> <p>Start Xserver-XSDL On the Android device</p> </li> <li> <p>Go to Startup</p> </li> </ol>"},{"location":"Android/#wifi","title":"WIFI","text":"<ol> <li> <p>Create a launcher script by entering the following commands:</p> <pre><code>rm ~/KlipperScreen/scripts/launch_KlipperScreen.sh\ntouch ~/KlipperScreen/scripts/launch_KlipperScreen.sh\nchmod +x ~/KlipperScreen/scripts/launch_KlipperScreen.sh\nnano ~/KlipperScreen/scripts/launch_KlipperScreen.sh\n</code></pre> </li> <li> <p>Start the app on the Android device (Xserver-XSDL or ViewTouch)</p> </li> <li> <p>Paste this into the script:</p> <p>Replace the example IP with the one that Android app shows in the screen. <pre><code>DISPLAY=192.168.150.122:0 $KS_XCLIENT\n</code></pre></p> </li> </ol> <p>Important</p> <p>It's recommended to use a static IP address, because if it changes your connection will stop working.</p>"},{"location":"Android/#startup","title":"Startup","text":"<p>Enter this command on the computer/SBC/Pi <pre><code>sudo service KlipperScreen restart\n</code></pre></p>"},{"location":"Android/#doesnt-start","title":"Doesn't start","text":"<p>Follow this steps:</p> <ol> <li>Reboot the Android device</li> <li>Open the XSDL app and leave it waiting in the blue-screen</li> <li>Reboot the computer/SBC/Pi</li> </ol>"},{"location":"Android/#xserver-xsdl-config","title":"Xserver-XSDL config","text":"<p>Some versions of the app require this configuration to work as expected.</p> <p>On the splash-screen of the app go to: <pre><code>\u201cCHANGE DEVICE CONFIGURATION\u201d\n\u2514\u2500\u2500Mouse Emulation Modde\n    \u2514\u2500\u2500Desktop, No Emulation\n</code></pre> if you missed it, restart the app.</p>"},{"location":"Android/#recommended-configuration-for-this-use-case","title":"Recommended configuration for this use case","text":"<p>Turn off DPMS and Display timeout:</p> <p></p>"},{"location":"Android/#stop-screen-blanking-in-xserver-xsdl","title":"Stop Screen Blanking in Xserver-XSDL","text":"<p>Even after enabling the \"Stay Awake\" option in the Developer/USB Debugging options of your Android device, the Xserver-XSDL may still go to a black screen but keep the backlight of your device on. To keep the screen always active, upon start up of Xserver-XSDL app, select the <code>Change Device Configuration</code> at the top of the splash screen and then select the <code>Command line parameters, one argument per line</code> option. Append the following argument (must be on separate lines): <pre><code>-s\n0\n</code></pre> This will disable the screen-saver in Xserver and keep KlipperScreen always active.</p>"},{"location":"Android/#migration-from-other-tutorials","title":"Migration from other tutorials","text":"<p>KlipperScreen says error option \"service\" is not supported anymore.</p> <p>Stop the other service and Remove it, for example if the service is <code>KlippyScreenAndroid</code>:</p> <pre><code>sudo service KlippyScreenAndroid stop\nsudo rm /etc/systemd/system/KlippyScreenAndroid.service\n</code></pre> <p>Follow this guide on how to set up the new launcher script with USB(ADB) or WI-FI and restart KS.</p>"},{"location":"Android/#help","title":"Help","text":"<p>The Discourse thread has old instructions, but you may get some help if needed</p> <p>#klipper-screen channel on Discord</p>"},{"location":"Configuration/","title":"Configuration","text":"<p>Usually you don't need to create a configuration file, but if you need to change something that is not changeable in the UI create a blank file in <code>~/printer_data/config/KlipperScreen.conf</code>, if the file already exist then just edit it.</p> <p>Write in the file only the options that need to be changed, and restart KlipperScreen.</p> <p>Critical</p> <p>Each configuration option should be on a newline, as they are presented here.</p> <p>The line endings should be of UNIX style (LF).</p>"},{"location":"Configuration/#main-options","title":"Main Options","text":"<p>The options listed here are not editable from within the user interface. <pre><code>[main]\n\n# Time in seconds before the Job Status page closes itself after a successful job/print\n# 0 means disabled\n# job_complete_timeout: 0\n\n# Time in seconds before the Job Status closes itself if an error is encountered\n# job_error_timeout: 0\n\n# If multiple printers are defined, this can be set the name of the one to show at startup.\n# default_printer: MyPrinter\n\n# To define a full set of custom menus (instead of merging user entries with default entries)\n# set this to False. See Menu section below.\n# use_default_menu: True\n\n# Define one or more moonraker power devices that turn on/off with the screensaver (CSV list)\n# screen_on_devices: example1, example2\n# screen_off_devices:  example1, example2\n\n# Define the password to use when locking the screen, this is not secure\n# it's saved as plain text, it's meant to be a deterrent for kids or people at shows\n# it will be redacted from the logs.\n# default is no password\n# lock_password: example_password\n</code></pre></p> <p>Tip</p> <p>It is strongly recommended that you do not add settings to the config file if you don't need them</p>"},{"location":"Configuration/#printer-options","title":"Printer Options","text":"<p>Multiple printers can be defined <pre><code># Define printer and name. Name is anything after the first printer word\n[printer MyPrinter]\n# Define the moonraker host/port if different from 127.0.0.1 and 7125\nmoonraker_host: 127.0.0.1\nmoonraker_port: 7125\n# Use HTTPS/WSS. Defaults to True for ports 443 or 7130, False for any other port\n# moonraker_ssl: False\n# If you're using the route_prefix option in your moonraker config, specify it here.\n# This can be useful for running multiple printers behind a path-based reverse proxy.\n# Most installs will not need this. \n# moonraker_path: printer1\n# Moonraker API key if this host is not connecting from a trusted client IP\n# moonraker_api_key: False\n\n# Define the z_babystep intervals in a CSV list. Currently only 2 are supported, the last value is default\n# z_babystep_values: 0.01, 0.05\n\n# For the 'Power on' button on the splash screen:\n# Define one or more moonraker power devices that turn on this printer (CSV list)\n# By Default it tries to match the printer name defined in this section header to the moonraker power device name.\n# This devices will be turned OFF when using the shutdown button\n# power_devices: example1, example2\n\n# Define what items should be shown in titlebar besides the extruder and bed\n# the name must be the same as defined in the klipper config\n# valid options are temperature_sensors or temperature_fans, or heater_generic\n# titlebar_items: chamber, MCU, Pi\n\n# The style of the user defined items in the titlebar\n# Can be 'full' indicating that the full name is shown, 'short' for the first letter, or None (default) for no name\n# titlebar_name_type: None\n\n# Z probe calibrate position\n# By default it tries to guess the correct location\n# it will try using zero reference position, safe_z, mesh midddle, middle of axis length, etc\n# example:\n# calibrate_x_position: 100\n# calibrate_y_position: 100\n\n# Custom commands for zcalibrate\n# the zcalibrate panel provides quick access to test_z, accept and cancel commands\n# zcalibrate_custom_commands: CUSTOM_CALIBRATE, CUSTOM_CALIBRATE method=manual, CUSTOM_TEST\n\n# Rotation is useful if the screen is not directly in front of the machine.\n# It will affect the bed mesh visualization.\n# Valid values are 0 90 180 270\n# screw_rotation: 0\n\n# Define distances and speeds for the extrude panel. CSV list 2 to 4 integers the second value is default\n# extrude_distances: 5, 10, 15, 25\n# extrude_speeds: 1, 2, 5, 25\n\n# Define distances for the move panel. comma-separated list with 2 to 7 floats and/or integers\n# move_distances: 0.1, 0.5, 1, 5, 10, 25, 50\n\n# Camera needs to be configured in moonraker:\n# https://moonraker.readthedocs.io/en/latest/configuration/#webcam\n</code></pre></p>"},{"location":"Configuration/#preheat-options","title":"Preheat Options","text":"<p>Added one the others disappeared, Is this normal?</p> <p>Adding a custom preheat section will cause the defaults to not load, this is the intended behaviour.</p> <pre><code>[preheat my_temp_setting]\nextruder: 195\nextruder1: 60\nheater_bed: 40\n# Use the name\nchamber: 60\n# or the full name\nheater_generic chamber: 60\n# or for example apply the same temp to devices of the same type\ntemperature_fan: 40\nheater_generic: 60\n# optional GCode to run when the option is selected\ngcode: MY_HEATSOAK_MACRO\n</code></pre> <p>There is a special preheat setting named cooldown to do additional things when the cooldown button is pressed do not add <code>TURN_OFF_ALL_HEATERS</code> or you will remove the ability to turn off individual heaters with this button. for example:</p> <pre><code>[preheat cooldown]\ngcode: M107\n</code></pre>"},{"location":"Configuration/#include-files","title":"Include files","text":"<pre><code># [include conf.d/*.conf]\n# Include another configuration file. Wildcards (*) will expand to match anything.\n</code></pre>"},{"location":"Configuration/#menu","title":"Menu","text":"<p>This allows a custom configuration for the menu displayed while the printer is idle. You can use sub-menus to group different items and there are several panel options available. It is possible to have a gcode script run on a menu button press. There are two menus available in KlipperScreen, __main and __print. The __main menu is displayed while the printer is idle. The __print menu is accessible from the printing status page.</p> <p>Info</p> <p>A predefined set of menus is already provided</p> <p>A menu item is configured as follows: <pre><code>[menu __main my_menu_item]\nname: Item Name\n#   To build a sub-menu of this menu item, you would next define [menu __main my_menu_item sub_menu_item]\n#\n#   --- The following items are optional ---\n#\n# icon: home\n#   Icon name to be used, it can be any image in the directory:\n#   KlipperScreen/styles/{theme}/images/ where {theme} is your current theme\n#   Supported formats svg or png\n#\n# style: mycolor4\n#   Icon style, defined as \"button.mycolor4\" (for example) in the theme css\n#\n# panel: preheat\n#   Panel from the panels folder in the KlipperScreen folder\n#\n# enable: {{ 'screws_tilt_adjust' in printer.config_sections and printer.power_devices.count &gt; 0 }}\n#   Enable allows hiding of a menu if the condition is false. (evaluated with Jinja2)\n#   Available variables are listed in the next section.\n#\n#   --- The items below do not work if you define a panel to be loaded ---\n#\n# method: printer.gcode.script\n#   Moonraker method to call when the item is selected, you will need params below\n#   the most common is is printer.gcode.script check out other methods in moonraker documentation:\n#   https://moonraker.readthedocs.io/en/latest/web_api/#run-a-gcode\n#\n# params: {\"script\":\"G28 X\"}\n#   Parameters that would be passed with the method above\n#\n# confirm: 'Are you sure?'\n#   If present this option will give you a confirmation prompt with the text above.\n#   It's recommended that you use a Macro-prompt instead of this option,\n#   as the Macro-prompt will also be shown on other interfaces, and it's more flexible.\n#   Macro-prompts are described in: https://klipperscreen.github.io/KlipperScreen/macros/#prompts\n</code></pre></p> <p>Variables to conditionally test the enable statement: <pre><code># Configured in Moonraker\nmoonraker.power_devices.count # Number of power devices\nmoonraker.cameras.count # Number of cameras\nmoonraker.spoolman # Has spoolman\n\n# Printer specific\nprinter.pause_resume.is_paused # Printing job is paused\nprinter.extruders.count # Number of extruders\nprinter.temperature_devices.count # Number of temperature related devices (not extruders)\nprinter.fans.count # Number of fans\nprinter.output_pins.count # Number of pins configured\nprinter.gcode_macros.count # Number of gcode macros\nprinter.gcode_macros.list # List of names of the gcode macros\nprinter.leds.count # Number of leds\nprinter.config_sections # Array of section headers of Klipper config (printer.cfg)\nprinter.available_commands # List of all the commands that the printer supports\n</code></pre></p> <p>A sample configuration of a main menu would be as follows: <pre><code>[menu __main homing]\nname: Homing\nicon: home\n\n[menu __main homing homeall]\nname: Home All\nicon: home\nmethod: printer.gcode.script\nparams: {\"script\":\"G28\"}\n\n[menu __main homing mymacro]\nname: My Macro\nicon: home\nmethod: printer.gcode.script\nparams: {\"script\":\"MY_MACRO\"}\nenable: {{ 'MY_MACRO' in printer.gcode_macros.list }}\n\n[menu __main preheat]\nname: Preheat\nicon: heat-up\npanel: preheat\n</code></pre></p>"},{"location":"Configuration/#klipperscreen-behaviour-towards-configuration","title":"KlipperScreen behaviour towards configuration","text":"<p>KlipperScreen will search for a configuration file in the following order:</p> <ol> <li>~/printer_data/config/KlipperScreen.conf</li> <li>~/.config/KlipperScreen/KlipperScreen.conf</li> <li>${KlipperScreen_Directory}/KlipperScreen.conf</li> </ol> <p>If you need a custom location for the configuration file, you can add launch argument</p> <p>If one of those files are found, it will be merged with the default configuration. Default Preheat options will be discarded if a custom preheat is found. If include files are defined then, they will be merged first.</p> <p>The default config is included here: (do not edit use as reference) ${KlipperScreen_Directory}/config/defaults.conf</p> <p>Do not copy the entire default.conf file, just configure the settings needed.</p> <p>If no config file is found, then when a setting is changed in the settings panel, a new configuration file should be created automatically.</p>"},{"location":"Configuration/#starting-on-a-different-monitordisplayscreen","title":"Starting on a different monitor/display/screen","text":"<p>Add -m or --monitor as a launch argument, to specify the number of the monitor, that will show Klipperscreen (default: 0).</p> <p>Warning</p> <p>Selecting the monitor is only allowed when KlipperScreen is set to launch fullscreen in standalone mode (no DE)</p>"},{"location":"Configuration/#adding-launch-arguments","title":"Adding launch arguments","text":"<p>The recommended way to add launch arguments is:</p> <ol> <li>Create a launch script:     <pre><code>touch ~/KlipperScreen/scripts/launch_KlipperScreen.sh\nchmod +x launch_KlipperScreen.sh\n</code></pre></li> <li> <p>Edit the script:     <pre><code>nano ~/KlipperScreen/scripts/launch_KlipperScreen.sh\n</code></pre>     Add the init and the launch argument, this example will launch KlipperScreen on the second monitor if exists:     <pre><code>/usr/bin/xinit $KS_XCLIENT --monitor 1\n</code></pre></p> <p>Tip</p> <p>you can use --configfile and --logfile to specify custom locations for those files</p> </li> </ol>"},{"location":"Contact/","title":"Contact","text":"<p>There are several ways to contact people who can assist with issues.</p> <p>Discord is probably going to provide the quickest response as there are more people in the chat who can help.</p>"},{"location":"Contact/#klipper-community-discord","title":"Klipper Community Discord","text":"<p>Look for the channel <code>#klipper-screen</code></p>"},{"location":"Contact/#issues-or-improvements-to-the-docs-or-the-application","title":"Issues or improvements to the docs or the application","text":"<p>You may submit a GitHub issue request for any bugs you encounter.</p> <p>or a Pull Request with translations, features, doc fixes.</p> <p>or open an issue describing the changes.</p> <p>or even provide ideas for a feature.</p> <p>GitHub repository</p>"},{"location":"Developers/","title":"Developer Guide","text":"<p>Basic setup for an environment to do development of KlipperScreen.</p> <p>Alfrix Note:</p> <p>I use a standard Linux distro with a desktop environment.</p>"},{"location":"Developers/#clone-the-repo","title":"Clone the repo","text":"<p>Clone your fork, for example: <pre><code>cd ~\ngit clone https://github.com/klipperscreen/klipperscreen.git\n</code></pre></p>"},{"location":"Developers/#install-the-dependencies-on-the-host","title":"Install the dependencies on the host","text":"<p>The X11 or Wayland dependencies should not be needed if you are running a desktop GNU/Linux distro. See scripts/system-dependencies.json</p>"},{"location":"Developers/#create-a-virtual-environment","title":"Create a virtual environment","text":"<p>For example: <pre><code>cd ~/KlipperScreen\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r scripts/klipperscreen-requirements.txt\n# this one is optional:\npip install -r scripts/dev-requirements.txt\n</code></pre></p>"},{"location":"Developers/#set-configurations","title":"Set configurations","text":"<p>Create klipperscreen.conf and place it on the repo folder <pre><code>[main]\nshow_cursor=True\n# disable screen timeouts\nuse_dpms=False\nscreen_blanking=off\n# disable Fullscreen and start in a specified size\n# 480 x 320 is the minimum size to target\nwidth=480\nheight=320\n# setting width or height will disable fullscreen and it's the intended behavior \n</code></pre></p> <p>At this point you can add your actual printer section with the IP (and port of needed) to the config or/and add a virtual printer</p>"},{"location":"Developers/#optional-virtual-printer","title":"Optional: Virtual printer","text":"<p>You may use a virtual printer like it's described in the klipper docs,  or it's alternative that uses docker</p> <p>Using a Virtual printer will need klipper and moonraker need to be installed in the machine too.</p> <p>Note</p> <p>The virtual printer has various limitations, like constant temperature and limited availability of pins, it's not a limitation of klipperscreen</p>"},{"location":"Developers/#optional-configure-the-ide","title":"Optional: Configure the IDE","text":"<ul> <li>Set interpreter to the virtual environment created</li> <li>Set the run configuration to <code>KlipperScreen/screen.py</code></li> </ul>"},{"location":"FAQ/","title":"Frequently Asked Questions","text":""},{"location":"FAQ/#what-is-the-minimum-python-version-required","title":"What is the minimum Python version required?","text":"<p>The minimum required version of Python is 3.8. This requirement is checked during installation.</p> Using Older Python Versions <p>If you need to use Python 3.7, you can revert KlipperScreen to v0.4.1 Connect to the printer via SSH and: <pre><code>cd ~/KlipperScreen\ngit reset --hard v0.4.1\n</code></pre></p>"},{"location":"FAQ/#does-klipperscreen-work-with-octoprint","title":"Does KlipperScreen work with OctoPrint?","text":"<p>KlipperScreen is not designed to work with OctoPrint, and there are no plans to make it compatible.</p>"},{"location":"FAQ/#can-i-use-klipperscreen-as-a-desktop-application","title":"Can I use KlipperScreen as a desktop application?","text":"<p>Yes, you can use KlipperScreen as a desktop application. During installation, do not install it as a service. If you have already installed it as a service, you can disable it by running: <pre><code>sudo systemctl disable KlipperScreen\n</code></pre> Then, you can open the application via the menu when needed. You can also find the shortcut in <code>KlipperScreen/scripts/KlipperScreen.desktop</code>.</p>"},{"location":"FAQ/#why-did-the-title-bar-turn-red-and-display-cpu-and-ram-usage","title":"Why did the title bar turn red and display CPU and RAM usage?","text":"<p>The red title bar indicating high CPU and RAM usage is a warning system. High resource usage can lead to issues, such as \"timer too close\" errors in Klipper. If this warning appears during an update or maintenance process, it is generally not an issue\u2014just avoid starting a print job until the warning clears. You can use htop or similar tools from an SSH connection to check what\u2019s consuming the resources.</p>"},{"location":"FAQ/#how-can-i-switch-between-multiple-printers","title":"How can I switch between multiple printers?","text":"<p>KlipperScreen supports multiple printers. You can switch between them by configuring each printer's IP address in the KlipperScreen settings. This allows you to manage all your printers from a single interface, even if they are running on different hosts.</p>"},{"location":"FAQ/#can-i-customize-the-klipperscreen-interface","title":"Can I customize the KlipperScreen interface?","text":"<p>Yes, you can customize the KlipperScreen interface by editing the configuration files. Detailed instructions and options for customization can be found in the documentation.</p>"},{"location":"FAQ/#what-should-i-do-if-my-touchscreen-is-not-responding-correctly","title":"What should I do if my touchscreen is not responding correctly?","text":"<p>If your touchscreen is not responding or has touch accuracy issues, check the Touch Issues section in the troubleshooting guide. You may need to calibrate the touch settings or adjust the touch matrix.</p>"},{"location":"FAQ/#how-do-i-update-klipperscreen","title":"How do I update KlipperScreen?","text":"<p>To update KlipperScreen, follow the instructions in the updating guide.</p>"},{"location":"FAQ/#what-if-i-sometimes-see-the-desktop-instead-of-klipperscreen","title":"What if I sometimes see the desktop instead of KlipperScreen?","text":"<p>If you sometimes see the desktop instead of KlipperScreen, and you only want to see KlipperScreen, you may have installed a distro with a full desktop environment. Check these instructions on how to properly switch.</p>"},{"location":"Hardware/","title":"Hardware","text":"<p>KlipperScreen supports a variety of screens, with a minimum supported resolution of 480x320. Generally, if a device can display a GNU/Linux desktop, it should be compatible with KlipperScreen.</p>"},{"location":"Hardware/#supported-hardware","title":"Supported Hardware","text":"<p>The following screens are known to work with KlipperScreen:</p> <ul> <li>BTT PI TFT50</li> <li>BTT HDMI5/7</li> <li>Raspberry PI 7\" Touchscreen</li> <li>Hyperpixel 4</li> <li>3.5\" RPi Display</li> <li>5\" HDMI Display-B</li> <li>VoCore</li> <li>WAVESHARE 4.3 inch DSI LCD</li> <li>Android phone</li> </ul> <p>For more hardware known to work with KlipperScreen, visit the Klipper Discourse.</p>"},{"location":"Hardware/#install","title":"Install","text":"<ol> <li>Install Your Screen: Follow the manufacturer\u2019s instructions for installing your screen. If you see a white screen, it indicates that the installation was not successful. Ensure that you can at least see a console.</li> <li>Install KlipperScreen: Once the screen is properly installed and functioning, proceed to install KlipperScreen.</li> </ol>"},{"location":"Hardware/#screen-rotation","title":"Screen Rotation","text":"<p>For information on screen rotation, refer to the Rotation section in the troubleshooting guide.</p>"},{"location":"Hardware/#touchscreen-touch-rotation","title":"Touchscreen Touch Rotation","text":"<p>For touchscreen rotation and matrix issues, see the Touch Issues section in the troubleshooting guide.</p>"},{"location":"Installation/","title":"Installation","text":""},{"location":"Installation/#first-steps","title":"First Steps","text":"<ol> <li>Install the Screen: Follow the manufacturer\u2019s instructions for installing your screen. Some screens may require additional software, while others might not.</li> <li>Test the Screen: Ensure your hardware is functioning correctly by testing it with RaspberryOS, Ubuntu, or your preferred distribution.</li> <li>Proceed to Install KlipperScreen: Once you\u2019ve confirmed that the screen is working, you can proceed with installing KlipperScreen.</li> </ol>"},{"location":"Installation/#setup","title":"Setup","text":"<p>The installation script is designed for RaspberryOS Lite, but it should work on other Debian derivatives as well.</p>"},{"location":"Installation/#auto-install","title":"Auto Install","text":"<p>KIAUH is a tool that helps you install or upgrade Klipper, Moonraker, Mainsail, and other extensions.</p> <p></p> <p>Visit KIAUH on GitHub to learn more and view its documentation.</p>"},{"location":"Installation/#manual-install","title":"Manual Install","text":"<p>Follow these steps to manually install KlipperScreen:</p> <p>Clone the KlipperScreen repository and run the installation script: <pre><code>cd ~/\ngit clone https://github.com/KlipperScreen/KlipperScreen.git\n./KlipperScreen/scripts/KlipperScreen-install.sh\n</code></pre> This script will install the necessary packages, create a Python virtual environment at <code>~/.KlipperScreen-env</code>, and install a systemd service file.</p> <p>Tip</p> <p>If you need a custom location for the configuration file, you can add the <code>-c</code> or <code>--configfile</code> option to the systemd file and specify the desired location.</p>"},{"location":"Installation/#moonraker-configuration","title":"Moonraker Configuration","text":"<ol> <li> <p>Ensure that the IP of the device is a trusted client in <code>moonraker.conf</code>:     <pre><code>[authorization]\ntrusted_clients:\n  127.0.0.1\n</code></pre>    Alternatively, add the Moonraker API key to <code>KlipperScreen.conf</code>.</p> </li> <li> <p>To use the update manager feature of Moonraker for KlipperScreen, add the following block to <code>moonraker.conf</code>:     <pre><code>[update_manager KlipperScreen]\ntype: git_repo\npath: ~/KlipperScreen\norigin: https://github.com/KlipperScreen/KlipperScreen.git\nvirtualenv: ~/.KlipperScreen-env\nrequirements: scripts/KlipperScreen-requirements.txt\nsystem_dependencies: scripts/system-dependencies.json\nmanaged_services: KlipperScreen\n</code></pre></p> </li> </ol> <p>Tip</p> <p>If you see warnings in other UIs, ignore them until KlipperScreen finishes installing and Moonraker is restarted.</p>"},{"location":"Installation/#printer-configuration","title":"Printer Configuration","text":"<p>Add the following basic configurations to your <code>printer.cfg</code> file for correct functionality: <pre><code>[virtual_sdcard]\npath: ~/printer_data/gcodes\n[display_status]\n[pause_resume]\n</code></pre></p>"},{"location":"Installation/#macros","title":"Macros","text":"<p>You may need additional macros for the printer to function as expected. For more information, read the macros page.</p>"},{"location":"Multi_instance/","title":"Multi instance","text":"<p>Multiple instances of KlipperScreen</p> <p>Difficulty: Advanced</p> <p>This article describes different methods of adding remote desktop clients (VNC or Xserver-XSDL) that do not support installing KS directly. If your remote device runs GNU/Linux then you should install KlipperScreen directly, instead of the methods described below.</p> <p>The instances will be independent of each other and not a mirror.</p>"},{"location":"Multi_instance/#notes-on-performance","title":"Notes on Performance","text":"<p>Beware that running multiple instances on the same device at the same time will consume more resources (memory and processing time) and can be taxing on lower end hardware, in my testing even a Raspberry Pi 3A can run multiple instances of KS, providing that it doesn't have any cameras or other advanced features.</p> <p>Tip</p> <p>You can view the system resource usage in the \"System\" panel of KlipperScreen or directly at the console with htop Beware that even if the load seems okay at idle, during a print heavy dynamic loads can push the device over the threshold and that may result in a Klipper error/failure, if it's running on the same device.</p> <p>Performance will heavily depend on the devices used, if one of the devices is connected through the network, like for example a VNC client or Android Xserver-XSDL client, then the network will influence the response time of the interface.</p>"},{"location":"Multi_instance/#option-1-using-the-startup-script-method","title":"Option 1: Using the startup script method","text":"<p>Advantage: relatively easy to setup</p> <p>Disadvantage: starting or stopping the service will affect all the instances</p> <p>The default KlipperScreen service will launch the script</p> <pre><code>nano $HOME/KlipperScreen/scripts/launch_KlipperScreen.sh\n</code></pre> <p>Example script:</p> <pre><code>#!/bin/bash\n/usr/bin/xinit $KS_XCLIENT &amp;\nDISPLAY=192.168.18.147:0 $KS_XCLIENT -c $HOME/.config/KlipperScreen/tablet.cfg &amp;\nwait\n</code></pre> <p>In this example the script launches a local instance for a screen connected to the host then it launches a server for xserver-xsdl client that is running at the defined IP, notice that the second instance uses a configuration that is specific to itself.</p> <p>Dont forget to restart the service to load the changes <pre><code>sudo systemctl restart KlipperScreen\n</code></pre></p>"},{"location":"Multi_instance/#option-2-using-a-separate-service","title":"Option 2: Using a separate service","text":"<p>Advantage: stopping and starting the service will only affect the desired instance</p> <p>Disadvantage: configuration and setup is more complex</p> <p>Create a new service unit file</p> <pre><code>sudo nano /etc/systemd/system/KlipperScreen_tablet.service\n</code></pre> <p>Example of a service unit for an android tablet: (change the IP and username) KlipperScreen_tablet.service<pre><code>[Unit]\nDescription=KlipperScreen Tablet\nStartLimitIntervalSec=0\nAfter=systemd-user-sessions.service plymouth-quit-wait.service\nConditionPathExists=/dev/tty0\nWants=dbus.socket systemd-logind.service\nAfter=dbus.socket systemd-logind.service\nAfter=moonraker.service\n\n[Service]\nType=simple\nRestart=always\nRestartSec=2\nSupplementaryGroups=klipperscreen\n# username\nUser=pi\nWorkingDirectory=/home/pi/KlipperScreen\nEnvironment=\"DISPLAY=192.168.18.147:0\"\n# Absolute paths are required, separate config is optional\nExecStart=/home/pi/.KlipperScreen-env/bin/python /home/pi/KlipperScreen/screen.py -c /home/pi/.config/KlipperScreen/tablet.cfg\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Test your new service <pre><code>sudo systemctl start KlipperScreen_tablet\n</code></pre></p> <p>Optional: After verifying it works, make it load when the system starts <pre><code>sudo systemctl enable KlipperScreen_tablet\n</code></pre></p> <p>if you made a mistake in the config you'll have to reload the service unit <pre><code>sudo systemctl daemon-reload\n</code></pre></p> <p>Add the new service to moonraker so it can be started and stopped from the UI <pre><code>nano $HOME/printer_data/moonraker.asvc\n</code></pre> In the example above it was <code>KlipperScreen_tablet</code>. Beware that is case sensitive</p> <p>So in this case it would look something like this: moonraker.asvc<pre><code>klipper_mcu\nwebcamd\nMoonCord\nKlipperScreen\nKlipperScreen_tablet\nmoonraker-telegram-bot\nmoonraker-obico\nsonar\ncrowsnest\noctoeverywhere\n</code></pre></p> <p>Restart moonraker <pre><code>sudo systemctl restart moonraker\n</code></pre></p>"},{"location":"Panels/","title":"Panels","text":""},{"location":"Panels/#splash-screen","title":"Splash Screen","text":"<p>Tip</p> <p>The 'power on' button will only appear if a power device exists in moonraker and that power device name should be added to <code>power_devices</code>  in the printer section of the klipperscreen configuration file</p>"},{"location":"Panels/#main-menu","title":"Main Menu","text":""},{"location":"Panels/#job-status","title":"Job Status","text":"<p><pre><code>panel: job_status\n</code></pre> </p>"},{"location":"Panels/#bed-level","title":"Bed Level","text":"<p><pre><code>panel: bed_level\n</code></pre> </p>"},{"location":"Panels/#bed-mesh","title":"Bed Mesh","text":"<p><pre><code>panel: bed_mesh\n</code></pre> </p>"},{"location":"Panels/#console","title":"Console","text":"<p><pre><code>panel: console\n</code></pre> </p>"},{"location":"Panels/#extrude","title":"Extrude","text":"<p><pre><code>panel: extrude theme:material-dark\n</code></pre> </p>"},{"location":"Panels/#fan","title":"Fan","text":"<p><pre><code>panel: fan\n</code></pre> </p>"},{"location":"Panels/#fine-tune","title":"Fine Tune","text":"<p><pre><code>panel: fine_tune\n</code></pre> </p>"},{"location":"Panels/#gcode-macros","title":"Gcode Macros","text":"<p><pre><code>panel: gcode_macros\n</code></pre> </p>"},{"location":"Panels/#input-shapers","title":"Input Shapers","text":"<p><pre><code>panel: input_shaper\n</code></pre> </p>"},{"location":"Panels/#limits","title":"Limits","text":"<p><pre><code>panel: limits\n</code></pre> </p>"},{"location":"Panels/#menu","title":"Menu","text":""},{"location":"Panels/#move","title":"Move","text":"<p><pre><code>panel: move\n</code></pre> </p>"},{"location":"Panels/#network","title":"Network","text":"<p><pre><code>panel: network\n</code></pre> </p>"},{"location":"Panels/#power","title":"Power","text":"<p><pre><code>panel: power\n</code></pre> </p>"},{"location":"Panels/#gcodes-print","title":"Gcodes / Print","text":"<p><pre><code>panel: gcodes\n</code></pre> </p>"},{"location":"Panels/#retraction","title":"Retraction","text":"<p><pre><code>panel: retraction\n</code></pre> </p>"},{"location":"Panels/#settings","title":"Settings","text":"<p><pre><code>panel: settings\n</code></pre> </p>"},{"location":"Panels/#spoolman","title":"Spoolman","text":"<p><pre><code>panel: spoolman\n</code></pre> </p>"},{"location":"Panels/#temperature","title":"Temperature","text":"<p><pre><code>panel: temperature\n</code></pre> </p>"},{"location":"Panels/#updater","title":"Updater","text":"<p><pre><code>panel: updater\n</code></pre> </p>"},{"location":"Panels/#z-calibrate","title":"Z Calibrate","text":"<p><pre><code>panel: zcalibrate\n</code></pre> </p>"},{"location":"Quicktips/","title":"Quicktips","text":"<p>quick tips, without much explanation</p>"},{"location":"Quicktips/#hide-macros-outputs-or-fans","title":"Hide macros, outputs or fans","text":"<p>Macros can be hidden directly from the interface in the macro settings.</p> <p>You can also hide them and other devices by prefixing the name with an underscore.</p> <p>Lets hide a temperature_fan:</p> <pre><code>[temperature_fan fan1]\n[temperature_fan _fan2]\n</code></pre> <p>fan1 will show in the interface, but _fan2 will be hidden.</p>"},{"location":"Quicktips/#layer-progress","title":"Layer Progress","text":"<ul> <li>PrusaSlicer</li> <li>Cura</li> <li>ideaMaker</li> <li>OrcaSlicer</li> </ul> <p>Follow this steps to provide the current layer in the printing information.</p> <p></p>"},{"location":"Quicktips/#prusaslicer","title":"PrusaSlicer:","text":"<ul> <li>Open PrusaSlicer</li> <li>Go to: <code>Printer Settings</code> &gt; <code>Custom Gcode</code> &gt; <code>Start Gcode</code></li> </ul> <p><pre><code>SET_PRINT_STATS_INFO TOTAL_LAYER=[total_layer_count]\n</code></pre> Printer Settings &gt; Custom Gcode &gt; After layer change Gcode</p> <pre><code>SET_PRINT_STATS_INFO CURRENT_LAYER={layer_num + 1}\n</code></pre>"},{"location":"Quicktips/#prusaslicer-layer-messages","title":"PrusaSlicer Layer Messages","text":"<ul> <li>Open PrusaSlicer</li> <li>Go to: <code>Printer Settings</code> &gt; <code>Custom Gcode</code> &gt; <code>After layer change Gcode</code></li> <li>Add this:</li> </ul> <pre><code>M117 Layer {layer_num+1}/[total_layer_count] : {filament_settings_id[0]}\n</code></pre>"},{"location":"Quicktips/#cura","title":"Cura","text":"<p>Cura doesn't have a way to use this directly (the only \"g-code on layer change\" post-processing plugin doesn't support variables), so the only way to work around is by adding a replacement post-processing script and a specific macro to Klipper.</p> <p>To add the script to Cura, use the following steps:</p> <ul> <li>Open Cura</li> <li>Open the <code>Extensions</code> menu, then <code>Post processing</code>, and click on <code>Modify G-Code</code></li> <li>Click the <code>Add Script</code> button, and select <code>Search and Replace</code> from the options</li> <li>On the <code>Search</code> textbox, enter this:</li> </ul> <pre><code>;(LAYER|LAYER_COUNT)\\:(\\d+)\n</code></pre> <ul> <li>On the <code>Replace</code> textbox, enter this:</li> </ul> <pre><code>;\\1:\\2\\n_CURA_SET_PRINT_STATS_INFO \\1=\\2\n</code></pre> <ul> <li>Tick the <code>Use Regular Expressions</code> checkbox</li> <li>Click Close</li> </ul> <p>In Klipper, add this macro to your printer.cfg:</p> <pre><code>[gcode_macro _CURA_SET_PRINT_STATS_INFO]\ngcode:\n  {% if params.LAYER_COUNT is defined %}\n    SET_PRINT_STATS_INFO TOTAL_LAYER={params.LAYER_COUNT}\n  {% endif %}\n  {% if params.LAYER is defined %}\n    SET_PRINT_STATS_INFO CURRENT_LAYER={(params.LAYER | int) + 1}\n  {% endif %}\n</code></pre> <p>Then save the changes and restart Klipper.</p> <p>After this, any new file sliced in Cura will tell Klipper how to handle the layer values</p>"},{"location":"Quicktips/#cura-layer-messages","title":"Cura Layer Messages","text":"<p>Install the extension: <code>Display Filename and Layer on LCD</code></p>"},{"location":"Quicktips/#ideamaker","title":"IdeaMaker","text":"<ul> <li>Open IdeaMaker</li> <li>Got to: <code>Slice</code> &gt; <code>Admin templates</code> &gt; <code>Click on your template</code> &gt; <code>edit</code></li> <li>Select the tabs named <code>Gcode</code> &gt; <code>Layer Change Gcode</code></li> <li>Paste this:</li> </ul> <pre><code>SET_PRINT_STATS_INFO TOTAL_LAYER={total_layers}\nSET_PRINT_STATS_INFO CURRENT_LAYER={layer_index}\n</code></pre> <p>Note</p> <p><code>{total_layers}</code> doesn't seem to be available in the Start gcode (at least on IdeaMaker 4.3.2)</p>"},{"location":"Quicktips/#ideamaker-layer-messages","title":"IdeaMaker Layer Messages","text":"<ul> <li>Open IdeaMaker</li> <li>Go to: <code>Slice</code> &gt; <code>Manage templates</code> &gt; <code>Click on your template</code> &gt; <code>Edit</code></li> <li>Select the tab named <code>Gcode</code> &gt; <code>Layer Change Gcode</code></li> <li>Paste this:</li> </ul> <pre><code>M117 Layer {layer_index} / {total_layers}\n</code></pre>"},{"location":"Quicktips/#orcaslicer","title":"OrcaSlicer","text":"<ul> <li>Open OrcaSlcicer</li> <li>Go to Prepare or Preview and in the printer section click <code>Edit Preset</code> &gt; <code>Machine G-code</code></li> <li>In <code>Start Gcode</code> add:</li> </ul> <pre><code>SET_PRINT_STATS_INFO TOTAL_LAYER=[total_layer_count]\n</code></pre> <ul> <li>In <code>Layer change Gcode</code> add:</li> </ul> <pre><code>SET_PRINT_STATS_INFO CURRENT_LAYER={layer_num + 1}\n</code></pre>"},{"location":"Quicktips/#orcaslicer-layer-messages","title":"OrcaSlicer Layer Messages","text":"<ul> <li>Open OrcaSlicer</li> <li>Go to Prepare or Preview and in the printer section click <code>Edit Preset</code> &gt; <code>Machine G-code</code></li> <li>Add this to \"Layer Change Gcode\":</li> </ul> <pre><code>M117 Layer {layer_num+1}/[total_layer_count] : {filament_settings_id[0]}\n</code></pre>"},{"location":"Theming/","title":"Theming","text":""},{"location":"Theming/#custom-printer-select-icons","title":"Custom Printer Select Icons","text":"<p>When multiple printers are configured, you can customize their icons by placing an icon file in the following directory:</p> <p><code>~/KlipperScreen/styles/printers/</code></p> <ul> <li>The icon file name must match the exact printer name as configured in <code>KlipperScreen.conf</code>.</li> <li>Supported formats for icons are SVG or PNG.</li> </ul> <p>Example: <pre><code>cp /path/to/printer_icon.svg ~/KlipperScreen/styles/printers/printer_name.svg\nsudo service KlipperScreen restart\n</code></pre></p>"},{"location":"Theming/#custom-themes","title":"Custom Themes","text":"<p>To create a custom theme for KlipperScreen, follow these steps:</p> <ol> <li> <p>Create Theme Directory:</p> <ul> <li>Navigate to <code>~/KlipperScreen/styles/</code>.</li> <li>Create a new folder with the desired theme name.</li> </ul> </li> <li> <p>Add Icon Images:</p> <ul> <li>Inside the theme folder, create a subfolder named <code>images</code>.</li> <li>Place your SVG icon files here. Refer to the code or default theme for specific icon names used by KlipperScreen.</li> </ul> </li> <li> <p>Customize Styles:</p> <ul> <li>Create a CSS file named <code>style.css</code> within your theme folder.</li> <li>Use existing themes or the default theme as a reference for CSS styles.</li> </ul> </li> </ol> <p>Example procedure for creating a theme named <code>mytheme</code>: <pre><code>cd ~/KlipperScreen/styles/\n# Create the directory\nmkdir -p mytheme/images\n# Copy required SVG icons\ncp material-light/images/* mytheme/images/\n# Create custom styles\necho \"window { background-color: #FFFFFF; }\" &gt; style.css\n</code></pre></p> <ol> <li>Apply the Theme:<ul> <li>After creating your theme, restart the KlipperScreen service: <pre><code>sudo service KlipperScreen restart\n</code></pre></li> <li>Select you theme from the list in the options.</li> </ul> </li> </ol>"},{"location":"Theming/#example-creating-a-custom-theme","title":"Example: Creating a Custom Theme","text":"<pre><code>cd ~/KlipperScreen/styles/\nmkdir -p mytheme/images\ncd mytheme\ncp ../default_theme/images/* images/\necho \"window { background-color: #FFFFFF; }\" &gt; style.css\nsudo service KlipperScreen restart\n</code></pre>"},{"location":"Theming/#example-custom-background-and-css","title":"Example: Custom Background and CSS","text":"<p>Creating a custom background from Mainsail sidebar using Z-bolt icons:</p> <pre><code>/* style.css */\nwindow {\n    background-image: url(\"/home/pi/mainsail/img/background.svg\");\n}\n\nbutton {\n    background-color: rgba(0,0,0,0);\n    border-radius: 2em;\n}\n</code></pre> <p></p>"},{"location":"Thumbnails/","title":"Thumbnails","text":"<p>KlipperScreen can display thumbnails in the file browser and as previews in the print status.</p> <p></p> <p>Recommended sizes for thumbnails:</p> <ul> <li>300 x 300 - For the larger previews.</li> <li>32 x 32   - For the smaller thumbnails used in lists.</li> </ul> <p>Note</p> <p>Other sizes should work, but keep in mind bigger thumbnails are slower to load and can produce bigger gcode files.</p>"},{"location":"Thumbnails/#select-your-slicer","title":"Select your slicer:","text":"<ul> <li>PrusaSlicer</li> <li>OrcaSlicer</li> <li>SuperSlicer</li> <li>Cura</li> <li>ideaMaker</li> </ul>"},{"location":"Thumbnails/#prusaslicer","title":"PrusaSlicer","text":"<p>In \u201cExpert\u201d mode PrusaSlicer has an option in the \u201cPrinter Settings\u201d tab to activate previews. Under General / Firmware.</p> <p></p>"},{"location":"Thumbnails/#orcaslicer","title":"OrcaSlicer","text":"<p>Usually works out of the box, the setting is in the printer settings under advanced:</p> <p></p>"},{"location":"Thumbnails/#superslicer","title":"SuperSlicer","text":"<p>In \u201cExpert\u201d mode SuperSlicer has some very convenient options in the \u201cPrinter Settings\u201d tab to activate and customize the previews.</p> <p></p>"},{"location":"Thumbnails/#cura","title":"Cura","text":""},{"location":"Thumbnails/#option-1-a-post-processing-script-cura-49","title":"Option #1 A post processing script (Cura 4.9+)","text":"<ol> <li>With Cura open, navigate to Extensions, Post Processing, Modify G-Code</li> <li>Click Add a script, and select Create Thumbnail</li> <li>Set both Width and Height to 300</li> <li>Click Add a script, and select Create Thumbnail</li> <li>Set both Width and Height to 32</li> <li>Click Close</li> </ol>"},{"location":"Thumbnails/#option-2-a-plugin-cura-47","title":"Option #2 A plugin  (Cura 4.7+)","text":"<p>Cura2Moonraker</p> <p></p>"},{"location":"Thumbnails/#ideamaker","title":"ideaMaker","text":"<ol> <li>Open the Advanced tab in the printer settings</li> <li>Enable \"GCode Thumbnails for Octoprint and Mainsail\"</li> <li>Set both Width and Height to 300</li> </ol>"},{"location":"Translations/","title":"Translations","text":"<p>Translations are hosted on Weblate:</p> <p> </p> <p>Thanks to the Weblate team for supporting the Open-Source community. </p>"},{"location":"Translations/#manual-way","title":"Manual way:","text":"<p>This is currently discouraged, but if you want you can make your changes manually</p>"},{"location":"Translations/#updating-an-existing-translation","title":"Updating an existing translation:","text":"<p>You can use an editor such as poedit to assist in translations.</p> <ul> <li>Edit <code>ks_includes/locals/{ISO 639 lang code}/LC_MESSAGES/KlipperScreen.po</code></li> </ul> <p>To test your translation:</p> <p>In poedit go to <code>File -&gt; Compile to MO</code>. Save it on the same folder, and restart KlipperScreen</p>"},{"location":"Translations/#adding-a-new-language","title":"Adding a new Language:","text":"<p>Example using poedit</p> <ul> <li>Select <code>Create a new translation</code> or <code>File -&gt; New from POT/PO</code> and select <code>ks_includes/locals/KlipperScreen.pot</code>.</li> </ul> <p>Important</p> <p>Do not edit the POT file as is automatically generated and your changes will be lost.</p> <ul> <li>Save the file as <code>ks_includes/locales/{ISO 639 lang code}/LC_MESSAGES/KlipperScreen.po</code></li> <li>Select <code>File -&gt; Compile to MO</code>.  Save it on the same folder, and restart KlipperScreen</li> </ul> <p>Note</p> <p>Wikipedia ISO 639 Language Codes</p> <p>Once you have restarted KlipperScreen, select it from the list in the settings. If you edited and recompiled, you need to restart KlipperScreen to reload the translation.</p>"},{"location":"Translations/#contributing","title":"Contributing:","text":"<p>Attach your translation on a GitHub issue or create a PR</p>"},{"location":"Troubleshooting/","title":"Troubleshooting","text":""},{"location":"Troubleshooting/#first-steps","title":"First Steps","text":"<p>The first step to troubleshooting any problem is getting the cause of the error.</p> <ul> <li>Find KlipperScreen.log:</li> </ul> <p>Important</p> <p>This log file should be provided if you ask for support.</p> <p>Depending on your setup the file could be accessible from the web interface alongside other logs</p> Mainsail Fluidd <p>if you can't find it in the web interface, you will need to grab the system logs as explained below</p> Alternative: Using sftp to grab the logs <p>It is possible to use sftp to grab the log, with an application like Filezilla or WinSCP</p> <p>With some file-browsers like Dolphin, just type the address for example: <code>sftp://pi@192.168.1.105/home/</code></p> <p>Locate the logs at <code>~/printer_data/logs</code>or in <code>/tmp/</code> if the former doesn't exist.</p>"},{"location":"Troubleshooting/#system-logs","title":"System logs","text":"<p>If KlipperScreen.log doesn't exist open a terminal in the host (typically from SSH) and run this commands:</p> Multiple printers on the same host <p>If the host is running multiple printers you may need to change <code>printer_data</code> to <code>printer_1_data</code></p> <pre><code>systemctl status KlipperScreen &gt; ~/printer_data/logs/KlipperScreen_systemctl.log\njournalctl -xe -u KlipperScreen &gt; ~/printer_data/logs/KlipperScreen_journalctl.log\ncp /var/log/Xorg.0.log ~/printer_data/logs/KlipperScreen_Xorg.log\ncp -n /tmp/KlipperScreen.log ~/printer_data/logs/KlipperScreen.log\n</code></pre> <p>This will copy all the relevant logs to the folder described above, so they can be downloaded from the browser. With the method described in the first section. You may need to press refresh or reload the page</p> Alternative: inspect them directly on the terminal: <p>Warning</p> <p>Please do not copy-paste the output of the terminal when providing info for an issue, most of the time this output will be incomplete, use the method described above</p> <pre><code>systemctl status KlipperScreen\njournalctl -xe -u KlipperScreen\ncat /var/log/Xorg.0.log\n</code></pre>"},{"location":"Troubleshooting/#screen-shows-console-instead-of-klipperscreen","title":"Screen shows console instead of KlipperScreen","text":"<p>If you see this line in the system logs:</p> <p><pre><code>xf86OpenConsole: Cannot open virtual console 2 (Permission denied)\n</code></pre> Follow this steps</p> <p>If you see this line in the system logs:</p> <p><pre><code>xinit[948]: /usr/lib/xorg/Xorg: symbol lookup error: /usr/lib/xorg/modules/drivers/fbturbo_drv.so: undefined symbol: shadowUpdatePackedWeak\n</code></pre> Follow this steps</p> <p>If you see this line in the system logs:</p> <p><pre><code>KlipperScreen-start.sh: (EE) no screens found(EE)\n</code></pre> This is usually not the main cause of the error. Start by checking the screen</p> <p>Drivers not installed or misconfigured can cause this too, continue looking the logs for more clues.</p> <p>If you see this line in the system logs:</p> <p><pre><code>modprobe: FATAL: Module g2d_23 not found in directory /lib/modules/6.1.21-v8+\n</code></pre> This error is common on RaspberryOS when using FBturbo, it's not a related issue, it works correctly with the error present.</p> <p>If you see this line in the system logs:</p> <pre><code>(EE) Cannot run in framebuffer mode. Please specify busIDs for all framebuffer devices\n</code></pre> <p>Follow this steps</p> <p>Maybe it's the wrong framebuffer</p> <p>If you can't fix it, try using a desktop distro as described here.</p> <p>If you want to contribute a solution: Contact</p>"},{"location":"Troubleshooting/#screen-is-always-white-black-or-no-signal","title":"Screen is always white / black or <code>No signal</code>","text":"<p>If the screen never shows the console even during startup, Then it's typically an improperly installed screen.</p> <p>Follow this steps</p>"},{"location":"Troubleshooting/#the-screen-shows-colors-or-no-signal-when-idle","title":"The screen shows colors or 'No signal' when idle","text":"<p>In KliperScreen settings find 'Screen DPMS' and turn it off.</p> <p></p> <p>Your screen doesn't seem to support turning off via software.</p> <p>KlipperScreen will enable an internal screensaver to make it all black, and hopefully avoid burn-in. If you find a way of turning it off, please share it: Contact</p>"},{"location":"Troubleshooting/#touch-issues","title":"Touch issues","text":"<p>Follow this steps</p>"},{"location":"Troubleshooting/#network-panel-doesnt-list-wi-fi-networks","title":"Network panel doesn't list WI-FI networks","text":"<p>Follow this steps</p>"},{"location":"Troubleshooting/#i-see-the-desktop-environment-instead-of-klipperscreen","title":"I see the Desktop environment instead of KlipperScreen","text":"<p>Follow this steps</p>"},{"location":"Troubleshooting/#unauthorized","title":"Unauthorized","text":"<p>Unauthorized means that you need add the IP of the device that runs KlipperScreen to the moonraker trusted clients or the Moonraker api-key to klipperscreen.conf</p> <p>Follow this steps</p>"},{"location":"Troubleshooting/#other-issues","title":"Other issues","text":"<p>If you found an issue not listed here, or can't make it work, please provide all the log files a description of your hw, and a description of the issue when asking for support</p>"},{"location":"Updating/","title":"Updating","text":""},{"location":"Updating/#using-moonraker-update-manager","title":"Using Moonraker update manager","text":"<p>Info</p> <p>This method will not work if KlipperScreen and Moonraker are on different Hosts</p> <p>For this to work, KlipperScreen should be added to moonraker.conf as explained in the installation instructions. moonraker-configuration</p> <p>Then you can update using the System panel:</p> <p></p> <p>or from any UI that supports updating from moonraker.</p>"},{"location":"Updating/#using-kiauh","title":"Using KIAUH","text":"<p>Same as in the installation instructions, but select update instead of install</p> <p></p>"},{"location":"Updating/#manual-update","title":"Manual update","text":"<pre><code>cd ~/KlipperScreen\ngit pull\nsource ~/.KlipperScreen-env/bin/activate\npip --disable-pip-version-check install -r ~/KlipperScreen/scripts/KlipperScreen-requirements.txt\nsudo service KlipperScreen restart\ndeactivate\n</code></pre>"},{"location":"VNC/","title":"VNC","text":"<p>This article describes how to use KlipperScreen through a remote connection.</p> <p>Warning</p> <p>The experience may not be equal to run KlipperScreen natively. Depending on the device or the network you may encounter performance degradation or other issues.</p>"},{"location":"VNC/#on-the-host-device","title":"On the Host device:","text":"<p>The host device could be for example a Raspberry Pi</p> <ol> <li>First install KlipperScreen</li> <li> <p>Install a vnc server package, for example:     <pre><code>sudo apt install tigervnc-standalone-server\n</code></pre></p> </li> <li> <p>Create <code>~/KlipperScreen/scripts/launch_KlipperScreen.sh</code>:</p> <pre><code>#!/bin/bash\n# Use display 10 to avoid clashing with local X server, if any\nXtigervnc -rfbport 5900 -noreset -AlwaysShared -SecurityTypes none :10&amp;\nDISPLAY=:10 $KS_XCLIENT&amp;\nwait\n</code></pre> <p>Tip</p> <p>To change resolution add: <code>-geometry 1280x720</code> to the arguments of Xtigervnc</p> </li> <li> <p>Make the script executable     <pre><code>chmod +x ~/KlipperScreen/scripts/launch_KlipperScreen.sh\n</code></pre></p> </li> <li> <p>Restart KlipperScreen or reboot the system:     <pre><code>sudo systemctl restart KlipperScreen.service\n</code></pre></p> </li> </ol>"},{"location":"VNC/#on-the-remote-device","title":"On the remote device:","text":"<p>Install a VNC viewer and  configure it to the ip of the host.</p> Example using an iPad Example using an Android device <p>It's recommended to turn off DPMS and Display timeout:</p> <p></p>"},{"location":"VNC/#example-using-an-ipad","title":"Example using an iPad","text":"<ul> <li>Install a VNC viewer for example: <code>RealVNC Viewer: Remote Desktop</code></li> <li>Open the VNC viewer app</li> <li>Press \"+\" button at the top right</li> <li>Enter IP address of your print host.</li> <li>Press \"Save\"</li> <li>Select \"Interaction\", select \"Touch panel\", go back</li> <li>Press \"Done\"</li> <li>Double-click on an icon with IP address you have just added.</li> <li>VNC client will complain about unencrypted connection. Disable the warning and say \"Connect\"</li> <li>Use or skip tutorial</li> <li>Press the \"Pin\" icon to hide the panel.</li> </ul>"},{"location":"VNC/#prevent-unwanted-rotation-of-ui","title":"Prevent unwanted rotation of UI","text":"<ul> <li>Go to <code>Settings</code> &gt; <code>General</code> &gt;  Set <code>Use side switch to</code> to <code>Lock Rotation</code></li> </ul>"},{"location":"VNC/#avoid-accidentally-switching-between-apps","title":"Avoid accidentally switching between apps","text":"<ul> <li>Go to <code>Restrictions</code> &gt; Set passcode &gt; Enable restrictions.</li> <li>Open</li> <li>Triple-click \"Home\" button</li> <li>Guided access pops up</li> <li>Press \"Start\"</li> <li>Now iPad is locked to VNC viewer until \"Guided access\" mode is disabled by triple-clicking \"Home\" button and entering the password.</li> </ul>"},{"location":"VNC/#example-using-an-android-device","title":"Example using an Android device","text":"<ul> <li>Install a VNC viewer for example: <code>RealVNC Viewer: Remote Desktop</code></li> <li>Open the VNC viewer app</li> <li>Press \"+\" button at the right</li> <li>Enter IP address of your print host.</li> <li>Press \"Save\"</li> <li>Double-click on an icon with name or IP address you have just added.</li> <li>VNC client may complain about unencrypted connection. Disable the warning and say \"Connect\"</li> </ul>"},{"location":"VNC/#prevent-unwanted-rotation-of-ui_1","title":"Prevent unwanted rotation of UI","text":"<ul> <li>Lock the rotation using the buttons in the notification bar or in device Settings &gt; Screen &gt; Disable \"Rotate automatically\"</li> </ul>"},{"location":"breaking/","title":"Breaking Changes","text":"<p>Only breaking changes will be listed here.</p>"},{"location":"breaking/#2024_05_24","title":"2024_05_24","text":"<ul> <li>Drop python 3.7 support, last version for it is v0.4.1: <code>git reset --hard v0.4.1</code></li> <li>Drop old WiFi manager, only maintain sdbus-networkmanager</li> </ul>"},{"location":"breaking/#2024_01_26","title":"2024_01_26","text":"<ul> <li>Deprecated old ~/klipper_config folder  users need to place the configfile in ~/printer_data/config, ~/.config/KlipperScreen, or directly in the repo</li> </ul>"},{"location":"breaking/#2023-10-08","title":"2023 10 08","text":"<ul> <li>Deprecated [bed_screws] and [z_calibrate_position] sections those configs should go in [printer name]</li> </ul>"},{"location":"breaking/#2023-07-23","title":"2023 07 23","text":"<ul> <li>Deprecated <code>camera_url</code> option of printer, the camera config is read from moonraker</li> </ul>"},{"location":"breaking/#2022-03-21","title":"2022 03 21","text":"<ul> <li>Default configuration is now merged again. Fixing 2021 05 20</li> </ul>"},{"location":"breaking/#2022-03-10","title":"2022 03 10","text":"<ul> <li>The \"Power On Printer\" button now requires power_devices under the printer section in KlipperScreen.conf the power_devices allowed are those defined in the config of moonraker of the printer The \"Power\" panel will be in the Menu if there are power devices found</li> </ul>"},{"location":"breaking/#2022-03-01","title":"2022 03 01","text":"<ul> <li>The \"Power On Printer\" button now requires that the printer name in KlipperScreen.conf and the power device in moonraker.conf to have the same name. The \"Power\" panel will be in the Menu if there are power devices found</li> </ul>"},{"location":"breaking/#2022-01-11","title":"2022 01 11","text":"<ul> <li>The Preheat panel has been deprecated in favor of an all-in-one Temperature panel</li> </ul> <p>Remove preheat panel from your Klipperscreen.conf or replace the occurrences of preheat with temperature</p>"},{"location":"breaking/#2021-05-20","title":"2021 05 20","text":"<ul> <li>Default configuration is not merged if a user configuration is set for a specific option</li> </ul> <p>For instance, if <code>menu __main</code> is user defined, the main menu will not have any defaults.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>This just tracks the most notable changes, if you want all the details checkout the commit history. Probably all versions contain changes regarding documentation, translation, fixes and other minor refactors</p>"},{"location":"changelog/#v046-jul-2-2025","title":"v0.4.6  (Jul 2, 2025)","text":"<ul> <li>basic lockscreen for shows or kids</li> <li>add fine-tune panel on the main/more menu</li> <li>add comment field if available in Spoolman</li> <li>save dialog asks to save z probe/endstop if it was modified</li> <li>power_devices defined in the config will turn off when using the shutdown button</li> </ul>"},{"location":"changelog/#v045-oct-28-2024","title":"v0.4.5  (Oct 28, 2024)","text":"<ul> <li>allow calling KlipperScreen panels from gcode</li> <li>bed_mesh: automatically call for z_tilt or quad_level if not applied</li> <li>show battery status in the topbar</li> <li>macros: keyboard to keypad input switch with auto pre-selection</li> </ul>"},{"location":"changelog/#v044-sep-16-2024","title":"v0.4.4  (Sep 16, 2024)","text":"<ul> <li>support for different moonraker routes</li> <li>allow showing/hiding cursor from the settings</li> <li>some wpa-eap support, adds the security type selector and user field</li> <li>extrude: wait for temp or open temp panel automatically close #1416</li> <li>extrude: show more filament sensors (up to 9)</li> <li>notifications: change icon if warnings were issued</li> <li>notifications: add clear close #1178</li> <li>notifications: klipper config warnings</li> </ul>"},{"location":"changelog/#v043-jun-29-2024","title":"v0.4.3  (Jun 29, 2024)","text":"<ul> <li>prompts: add regular buttons and groups</li> <li>refactor: always ignore and hide console temp responses</li> <li>gcodes: vertical: remove left icons if low resolution</li> <li>keypad: support floating point temp</li> <li>gcodes: add extra info to confirm print</li> <li>zcalibrate: add a dropdown with the function name to select</li> <li>job_status: auto-estimated time: use last print time if available</li> <li>gcodes: add option to delete in the confirmation</li> </ul>"},{"location":"changelog/#v042-jun-10-2024","title":"v0.4.2  (Jun 10, 2024)","text":"<ul> <li>job_status: remove the status message and use the titlebar for that</li> <li>shutdown: add restart ks</li> <li>extrude: move firmware retraction into the panel, add pressure advance control closes #724</li> <li>screen: theme doesn't need a restart anymore</li> <li>splash: show the message when klipper is shutdown</li> <li>rename print panel to gcodes</li> <li>job_status: add extra info to print list and dialog</li> <li>network: new NetworkManager backend using sdbus (#1269)</li> <li>drop python 3.7 support (#1271)</li> </ul>"},{"location":"changelog/#v041-may-24-2024","title":"v0.4.1  (May 24, 2024)","text":"<ul> <li>vertical layout: increase font size</li> <li>main_menu and temp: change layout to accomodate a bigger graph and list in vertical mode</li> <li>pins: add pwm_tool</li> <li>menu: add pins panel access while printing</li> <li>move and zcalibrate: changes in z invert</li> <li>system: add cpu and memory usage tracking</li> <li>add system info panel</li> <li>updater: add distro name</li> <li>menu: rename system to update</li> <li>allow 2 different screen timeouts, one while printing the other if not</li> <li>settings: Add tooltips</li> <li>printer_select: support custom icons #1240</li> <li>bed_mesh: show round bed without padded values</li> <li>macros: send gcode style (G/M) macros without =</li> <li>bed_mesh: bedmap draw axis</li> <li>zcalibrate: add support for axis twist compensation</li> <li>zcalibrate: add confirmation for abort close #1326</li> </ul>"},{"location":"changelog/#v040-apr-14-2024","title":"v0.4.0  (Apr 14, 2024)","text":"<ul> <li>move: support rescaling the slider if machine limits are changed</li> <li>bed_mesh: add support for rotation and inversion to the meshMap</li> <li>bed_level: add a warning for the screws not being used</li> <li>heatergraph: add the ability to go fullscreen when clicked close #740</li> <li>Add an alternative to X close #1289 (#1306) (Wayland)</li> <li>limits: change to minimum cruise ratio</li> <li>heatergraph: add power representation (if set to show power in settings)</li> <li>base_panel: titlebar: turn red if high cpu or memory is in use, show usage</li> <li>create the shutdown panel, add it to the action bar, remove items from system panel</li> <li>job_status: show current offset when saving to endstop close #1286</li> </ul>"},{"location":"changelog/#v039-feb-29-2024","title":"v0.3.9  (Feb 29, 2024)","text":"<ul> <li> <p>print panel refactor and new features (#1270)     Adds a grid/thumbnail mode (switchable to the list mode)     last mode used is saved     faster load and less memory usage     add sort by size</p> </li> <li> <p>extrude: add an extruder selector for machines with more than 5 extruders (#1249)</p> </li> <li>pins: make the non pwm pins on-off pwm pins as a scale</li> <li>popups: rate limit to every second close #1225</li> <li>feat: macro prompts close #1216 (#1219)</li> </ul>"},{"location":"changelog/#v038-dec-23-2023","title":"v0.3.8  (Dec 23, 2023)","text":"<ul> <li>add move_distances config option (#1211)</li> <li>printer_select: do not sort, this allows the users to sort how they want by defining them in the config in the order they want</li> </ul>"},{"location":"changelog/#v037-nov-24-2023","title":"v0.3.7  (Nov 24, 2023)","text":"<ul> <li>wifi: add icons</li> <li>initial notifications panel</li> <li>add moonraker warnings</li> </ul>"},{"location":"changelog/#v036-sep-24-2023","title":"v0.3.6  (Sep 24, 2023)","text":"<ul> <li>LED light control, close #991 (#1106)</li> <li>pause will auto-open extrude</li> <li>macros: hide the panel if there are no elegible macros</li> <li>job_status: click thumbnail for fullscreen thumbnail</li> </ul>"},{"location":"changelog/#v035-aug-21-2023","title":"v0.3.5  (Aug 21, 2023)","text":"<ul> <li>camera: relative url support close #1086 (#1088)</li> <li>Spoolman support close #1060</li> <li>Use callbacks to disable and enable buttons to improve user feedback</li> <li>main_menu: allow closing the keypad with the back button</li> <li>camera: add support for moonraker cameras, deprecates camera_url</li> </ul>"},{"location":"changelog/#v034-jul-30-2023","title":"v0.3.4  (Jul 30, 2023)","text":"<ul> <li>fine_tune: split speed and flow selectors close #935</li> <li>job_status: show save to endstop to apply offset for deltas close #916</li> <li>job_status: change progress percentage to time-based instead of file-based</li> </ul>"},{"location":"changelog/#v033-jul-2-2023","title":"v0.3.3  (Jul 2, 2023)","text":"<ul> <li>Menu reorganization (#1029)</li> <li>temp: add pid calibrate to the keypad (#1026)</li> <li>bed_level: add center screw close #863</li> </ul>"},{"location":"changelog/#v032-feb-20-2023","title":"v0.3.2  (Feb 20, 2023)","text":"<ul> <li>add ability to style and template menu buttons (#866)</li> <li>Update on-screen keyboard (#874)</li> </ul>"},{"location":"changelog/#v031-dec-11-2022","title":"v0.3.1  (Dec 11, 2022)","text":"<ul> <li>feat: camera support, using mpv as backend</li> <li>resizability</li> <li>print: add move/rename, make delete a visible button close #636</li> </ul>"},{"location":"changelog/#v030-dec-5-2022","title":"v0.3.0  (Dec 5, 2022)","text":"<ul> <li>feat: turn on_off power devices with the screensaver close #518</li> <li>macros add parameters</li> <li>print: allow directory deletion</li> <li>job_status: add eta</li> <li>Added support for network manager</li> <li>settings: add extra large font close #798</li> </ul>"},{"location":"changelog/#v029-nov-18-2022","title":"v0.2.9  (Nov 18, 2022)","text":"<ul> <li>job_status: use the new print_stats layer info</li> <li>functions: logging: use printer_data</li> <li>keyboard: add spanish and german, change backscpace, clear and accept to icons</li> </ul>"},{"location":"changelog/#v028-oct-27-2022","title":"v0.2.8  (Oct 27, 2022)","text":"<ul> <li>config: add printer_data to default config search locations</li> <li>extrude: make the speed and distance configurable close #673</li> <li>limits and retraction: infinite sliders</li> <li>print: hide files and directories starting with .</li> </ul>"},{"location":"changelog/#v027-oct-4-2022","title":"v0.2.7  (Oct 4, 2022)","text":"<ul> <li>exclude: graph (#743)</li> <li>Add current heater power % to job status (#708)</li> </ul>"},{"location":"changelog/#v026-sep-2-2022","title":"v0.2.6  (Sep 2, 2022)","text":"<ul> <li>Change URL protocol to HTTPS and WSS when connecting to port 443</li> <li>main temp: add the ability to hide the graph</li> <li>system: add shutdown and restart host</li> <li>exclude: add exclude objects support</li> </ul>"},{"location":"changelog/#v025-aug-1-2022","title":"v0.2.5  (Aug 1, 2022)","text":"<ul> <li>system: Add check for updates close #681</li> <li>bed_level: support 3 screws close #606</li> <li>job_status: now works without extruders or fans</li> <li>print: add delete file</li> <li>screen: Always ask to save config if we detect it on responses</li> <li>output_pin panel close #546</li> <li>built-in keyboard</li> </ul>"},{"location":"changelog/#v024-jul-3-2022","title":"v0.2.4  (Jul 3, 2022)","text":"<ul> <li>Enable users to inject a custom script to start KlipperScreen (#660)</li> <li>basic support for extruder_stepper</li> <li>fan: add max and stop buttons</li> </ul>"},{"location":"changelog/#v023-may-31-2022","title":"v0.2.3  (May 31, 2022)","text":"<ul> <li>job_status: ask for confirmation, and show saved offset</li> <li>extrude: add filament sensor support</li> <li>limits: add reset, allow to set above the configured maximum but turn the slider red</li> <li>job_status: animate filename if it's too long</li> <li>macros: allow reverse sorting</li> <li>Add Input Shaper panel</li> <li>zcalibrate: show the saved offset and offset to be saved</li> <li>Allow setting 0 in preheat options (#612)</li> </ul>"},{"location":"changelog/#v022-may-1-2022","title":"v0.2.2  (May 1, 2022)","text":"<ul> <li> <p>Improve Job status (#592)</p> <p>Adds heater_generic and/or temp_sensors besides extruder/bed (because of the limited space maybe only 1)</p> <p>Temps are now buttons and act as a shortcut to the temp panel</p> <p>Adds fan_generic to the fan label and it's now a shortcut to the fan panel</p> <p>The colors and size of the progress circle were changed to be more subtle.</p> <p>Margins between items were augmented, because they are buttons now</p> <p>Adds 3 information pages: move, extrusion and time: * move can be opened with speed or z buttons * time with elapsed/remaining buttons * extrusion with the extrude_factor / flowrate button</p> </li> <li> <p>limits: add units</p> </li> <li>Add firmware retraction panel close #101</li> <li>Add possibility to define custom code for cooling (#579)</li> <li>job_status: add save z button to save babystepping</li> <li>console: hide temps, clear button, button icons</li> </ul>"},{"location":"changelog/#v021-apr-1-2022","title":"v0.2.1  (Apr 1, 2022)","text":"<ul> <li>Vertical mode (#480)</li> <li>Use extruder icon without number if there is only 1</li> <li>Screensaver if dpms is off</li> <li>fine_tune: add reset button, do not set babystepping prior to homing, reorganize a bit</li> <li>menu and printer_select: support more than 8 items</li> <li>zcalibrate: add selector for the different modes zcalibrate supports</li> <li>system: feature: add Full Update</li> <li>Added option to select default printer at startup. (#542)</li> <li>Show fan speed according to max_power and off_below (#543)</li> <li>console: add switch to turn off autoscroll (#540)</li> <li>base_panel: allow titlebar items to be configured</li> <li>splash_screen: allow power_devices to be configured</li> <li>Bed_level: Support 6 and 8 Screws and rotation (#484)</li> <li>Show position including offsets in the move panel (#516)</li> <li>Start in configurations without fans or extruders or temp devices</li> <li>Extrude panel: Support 5 extruders (#441)</li> <li>Support hiding by name using underscore (#437)</li> <li>Support Manual Mesh calibration (#388)</li> <li>Support the \"enter\" key from a physical keyboard (#379)</li> <li>Support multiple power devices. (#350)</li> <li>add speed as parameter to UN/LOAD_FILAMENT macro (#359)</li> </ul>"},{"location":"changelog/#v020-dec-7-2021","title":"v0.2.0  (Dec 7, 2021)","text":"<p>The Project changed maintainer alfrix (Thats the reason for the version jump)</p> <ul> <li>Temp graph (#357)</li> <li>Create keypad widget and include set temp on the main menu</li> <li>Switch from vext.gi to PyGObject (#348)</li> <li>Add the full message of the commits in the updater (#343)</li> <li>Wakeup touch block (#340)</li> <li>screen: RESPOND echo will now show a message on the screen.</li> <li>Zcal panel: Support for Z_ENDSTOP_CALIBRATE (#327)</li> <li>Move panel: Add Z-tilt/Quad-gantry-level/HomeXY button (#326)</li> <li>Add temperature_fan to heaters (#325)</li> <li>Configurable xy position for z-calibrate (#310)</li> <li>Material themes (#297)</li> <li>Support custom themes (#288)</li> <li>Allow gcode commands with preheat options (#274)</li> <li>Add printer limits panel</li> <li>Add unload/load and reorganize extrude panel (#250)</li> <li>Font Size Selector (#245)</li> <li>Wake the screen at print start and end (#229)</li> <li>system: Add restart option to services that moonraker supports</li> <li>base_panel: Add extruder/heater bed temperatures to the title bar</li> </ul>"},{"location":"changelog/#v016-may-13-2021","title":"v0.1.6  (May 13, 2021)","text":"<ul> <li>Wifi manager: Updates to include ability to change wifi networks</li> </ul>"},{"location":"changelog/#v015-may-10-2021","title":"v0.1.5  (May 10, 2021)","text":"<ul> <li>New Style - Solarized (#144)</li> <li>M117 messages display (#150)</li> <li>print: Include refresh button for files</li> <li>bed_mesh: Include ability to view mesh Added ability to visualize bed meshes. The active bed mesh will have more points available to view than inactive bed meshes.</li> <li>Multiple printers (#85)</li> <li>screen: Enable DPMS so screens can power down.</li> <li>screen: Allow cursor to be displayed #51</li> <li>temperature: add heater_generic</li> <li>screen: Only process current panel's subscription</li> </ul>"},{"location":"changelog/#v014-feb-15-2021","title":"v0.1.4  (Feb 15, 2021)","text":"<ul> <li>network: Show wifi information</li> <li>screen_panel: Put icons on a sidebar instead of on the header</li> <li>printer: Include quad_gantry_level</li> <li>wifi: Initial wifi class</li> <li>job_status/settings: Allow different file estimation methods</li> <li>print: Allow sorting by date and name.</li> </ul>"},{"location":"changelog/#v013-jan-7-2021","title":"v0.1.3  (Jan 7, 2021)","text":"<ul> <li>gcode_macros: Update to hide macros based on settings</li> <li>settings: Create settings panel for KlipperScreen settings</li> <li>job_status: updates to show active extruder</li> <li>KlippyWebsocket: changes to allow for moonraker api key</li> <li>gcode_macros: add a panel for gcode macros</li> <li>screen: allow custom moonraker url/port</li> <li>config: Allow specifying configfile location from command line</li> <li>UI scaling (#28)</li> <li>move: Allow inverting of the axis</li> <li>bed_level: include screws_tilt_calculate command</li> <li>fine_tune: Remove fan from fine tune panel. Add fan to print menu</li> <li>configuration: hide extrude while printing</li> <li>bed_mesh: Add panel for bed_mesh</li> <li>screen: add popup message capability</li> </ul>"},{"location":"changelog/#v012-dec-2-2020","title":"v0.1.2  (Dec 2, 2020)","text":"<ul> <li>Change panel layout. Add title and move back button</li> <li>system: add klipper version</li> </ul>"},{"location":"changelog/#v011-nov-28-2020","title":"v0.1.1  (Nov 28, 2020)","text":"<ul> <li>Add power panel</li> <li>menu: add ability to hide certain menus</li> <li>Dynamically load panels</li> <li>Add HOME XY button</li> <li>Highlight all heaters by default on preheat panel</li> </ul>"},{"location":"changelog/#v010-nov-14-2020","title":"v0.1.0  (Nov 14, 2020)","text":"<ul> <li>first release</li> </ul>"},{"location":"changelog/#v000-jul-6-2020","title":"v0.0.0  (Jul 6, 2020)","text":"<ul> <li>first commit</li> </ul>"},{"location":"macros/","title":"Macros","text":""},{"location":"macros/#recommended","title":"Recommended","text":"<p>Note</p> <p>If you have already installed other UIs then you may have these macros already, and it's usually asked by KIAUH</p> <p>None of the following macros are strictly required for KlipperScreen, but they provide the toolhead parking at pause and cancel.</p> <p>These can be assumed sane defaults, but should be checked and modified to your own needs.</p>"},{"location":"macros/#pause","title":"Pause","text":"printer.cfg<pre><code>[gcode_macro PAUSE]\ndescription: Pause the actual running print\nrename_existing: PAUSE_BASE\ngcode:\n  PAUSE_BASE\n  _TOOLHEAD_PARK_PAUSE_CANCEL\n</code></pre>"},{"location":"macros/#resume","title":"Resume","text":"printer.cfg<pre><code>[gcode_macro RESUME]\ndescription: Resume the actual running print\nrename_existing: RESUME_BASE\ngcode:\n  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####\n\n  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}\n  #### get VELOCITY parameter if specified ####\n  {% if 'VELOCITY' in params|upper %}\n    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}\n  {%else %}\n    {% set get_params = \"\" %}\n  {% endif %}\n  ##### end of definitions #####\n  {% if printer.extruder.can_extrude|lower == 'true' %}\n    M83\n    G1 E{extrude} F2100\n    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}\n  {% else %}\n    {action_respond_info(\"Extruder not hot enough\")}\n  {% endif %}\n\n  RESUME_BASE {get_params}\n</code></pre>"},{"location":"macros/#park","title":"Park","text":"printer.cfg<pre><code>[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]\ndescription: Helper: park toolhead used in PAUSE and CANCEL_PRINT\nvariable_extrude: 1.0\ngcode:\n  ##### set park position for x and y #####\n  # default is your max position from your printer.cfg\n\n  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n  {% set z_park_delta = 2.0 %}\n  ##### calculate save lift position #####\n  {% set max_z = printer.toolhead.axis_maximum.z|float %}\n  {% set act_z = printer.toolhead.position.z|float %}\n  {% if act_z &lt; (max_z - z_park_delta) %}\n    {% set z_safe = z_park_delta %}\n  {% else %}\n    {% set z_safe = max_z - act_z %}\n  {% endif %}\n  ##### end of definitions #####\n  {% if printer.extruder.can_extrude|lower == 'true' %}\n    M83\n    G1 E-{extrude} F2100\n    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}\n  {% else %}\n    {action_respond_info(\"Extruder not hot enough\")}\n  {% endif %}\n  {% if \"xyz\" in printer.toolhead.homed_axes %}\n    G91\n    G1 Z{z_safe} F900\n    G90\n    G1 X{x_park} Y{y_park} F6000\n    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}\n  {% else %}\n    {action_respond_info(\"Printer not homed\")}\n  {% endif %}\n</code></pre>"},{"location":"macros/#cancel","title":"Cancel","text":"printer.cfg<pre><code>[gcode_macro CANCEL_PRINT]\ndescription: Cancel the actual running print\nrename_existing: CANCEL_PRINT_BASE\nvariable_park: True\ngcode:\n  ## Move head and retract only if not already in the pause state and park set to true\n\n  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n    _TOOLHEAD_PARK_PAUSE_CANCEL\n  {% endif %}\n\n  TURN_OFF_HEATERS\n  CANCEL_PRINT_BASE\n</code></pre>"},{"location":"macros/#extrude-panel","title":"Extrude Panel","text":""},{"location":"macros/#load_filament-unload_filament","title":"LOAD_FILAMENT / UNLOAD_FILAMENT","text":"<p>These macros are used in the Extrude panel <code>Load</code> and <code>Unload</code> buttons. and they will be hidden from the macros panel.</p> <p>The selected speed in the panel is transferred as a parameter.</p> <p>The following examples show how this can be used:</p> printer.cfg<pre><code>[gcode_macro LOAD_FILAMENT]\nvariable_load_distance:  50\nvariable_purge_distance:  25\ngcode:\n    {% set speed = params.SPEED|default(300) %}\n    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\n    SAVE_GCODE_STATE NAME=load_state\n    G91\n    G92 E0\n    G1 E{load_distance} F{max_velocity} # fast-load\n    G1 E{purge_distance} F{speed} # purge\n    RESTORE_GCODE_STATE NAME=load_state\n</code></pre> <p>Warning</p> <p><code>variable_load_distance</code> will depend on the printers distance from the extruder to the nozzle.</p> <p>For printers with long bowden tubes you may have to increase the extrude only distance in the configfile</p> printer.cfg<pre><code>[extruder]\nmax_extrude_only_distance: 600 # default is 50mm\n</code></pre> printer.cfg<pre><code>[gcode_macro UNLOAD_FILAMENT]\nvariable_unload_distance:  50\nvariable_purge_distance:  25\ngcode:\n    {% set speed = params.SPEED|default(300) %}\n    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\n    SAVE_GCODE_STATE NAME=unload_state\n    G91\n    G92 E0\n    G1 E{purge_distance} F{speed} # purge\n    G1 E-{unload_distance} F{max_velocity} # fast-unload\n    RESTORE_GCODE_STATE NAME=unload_state\n</code></pre> <p>if it loads too fast and your extruder can't keep up, you should adjust the <code>max_extrude_only_velocity</code> in <code>printer.cfg</code></p>"},{"location":"macros/#hidden-by-the-interface","title":"Hidden by the interface","text":"<p>All gcode_macros with the attribute <code>rename_existing</code> are hidden , because these are default Klipper Gcodes and these should be implemented in KlipperScreen itself with buttons already. This is the same behaviour of other UIs</p> <p>LOAD_FILAMENT and UNLOAD_FILAMENT are also hidden</p>"},{"location":"macros/#hide-macros","title":"Hide Macros","text":"<p>Macros can be completely hidden in the interface by prefixing the name with an underscore.</p> printer.cfg<pre><code>[gcode_macro MY_AWESOME_GCODE]\ngcode:\n    _MY_HELPER_CODE\n\n[gcode_macro _MY_HELPER_CODE]\ngcode:\n    M300\n</code></pre> <p><code>MY_AWESOME_GCODE</code> appears in your interface settings, but <code>_MY_HELPER_CODE</code> does not.</p>"},{"location":"macros/#prompts","title":"Prompts","text":"<p>It allows macros in Klipper to trigger dialog prompts to interact with the Firmware and will enable the user to choose between options or to close the dialog again in case it's no longer needed.</p> <p>Warning</p> <p>This feature needs the <code>[respond]</code> module of Klipper.</p> <p>So please check if this is enabled in your Klipper config.</p>"},{"location":"macros/#supported-macro-prompt-commands","title":"Supported Macro prompt commands","text":"<p>Begin the prompt and set a title:</p> Start<pre><code>RESPOND TYPE=command MSG=\"action:prompt_begin My Prompt\"\n</code></pre> <p>Add a button:</p> <p><code>prompt_button</code> or <code>prompt_footer_button</code></p> <p>The options are label | gcode | style</p> <p>Supported styles: primary, secondary, info, warning, error</p> Add a button<pre><code>RESPOND TYPE=command MSG=\"action:prompt_button button_text|RESPOND MSG=test|info\"\n</code></pre> <p>Info</p> <p>Only 4 footer buttons are allowed, the rest will not show due to screen space concerns</p> <p>Show the prompt on the screen: Show<pre><code>RESPOND TYPE=command MSG=\"action:prompt_show\"\n</code></pre></p> <p>Optional: Close the Prompt: Close<pre><code>RESPOND TYPE=command MSG=\"action:prompt_end\"\n</code></pre></p> <p>Groups: Footer buttons will be displayed on the same row, but regular buttons will default to 1 per row, to display them in the same row group them:</p> Group Start<pre><code>RESPOND TYPE=command MSG=\"action:prompt_button_group_start\"\n</code></pre> <p>add buttons and then:</p> Group End<pre><code>RESPOND TYPE=command MSG=\"action:prompt_button_group_end\"\n</code></pre>"},{"location":"macros/#examples","title":"Examples","text":"<pre><code>[gcode_macro SHOW_PROMPT]\ngcode:\n    RESPOND TYPE=command MSG=\"action:prompt_begin My Prompt\"\n    RESPOND TYPE=command MSG=\"action:prompt_text This is an example of a prompt\"\n    RESPOND TYPE=command MSG=\"action:prompt_button primary|G28|primary\"\n    RESPOND TYPE=command MSG=\"action:prompt_button secondary|RESPOND MSG=test|secondary\"\n    RESPOND TYPE=command MSG=\"action:prompt_button info|RESPOND MSG=test #2|info\"\n    RESPOND TYPE=command MSG=\"action:prompt_button warning|RESPOND MSG=test #3|warning\"\n    RESPOND TYPE=command MSG=\"action:prompt_show\"\n</code></pre> <p><pre><code>[gcode_macro SHOW_PROMPT_2]\ngcode:\n    RESPOND TYPE=command MSG=\"action:prompt_begin Nevermind just close this &gt;&gt;&gt;\"\n    RESPOND TYPE=command MSG=\"action:prompt_text Do you want to load a new filament?\"\n    RESPOND TYPE=command MSG=\"action:prompt_footer_button Load|LOAD_FILAMENT\"\n    RESPOND TYPE=command MSG=\"action:prompt_footer_button Unload|UNLOAD_FILAMENT|error\"\n    RESPOND TYPE=command MSG=\"action:prompt_show\"\n</code></pre> </p>"},{"location":"macros/#klipperscreen-actions","title":"KlipperScreen actions","text":"<p>Warning</p> <p>this should be considered experimental</p> <p>Show a panel: <pre><code>RESPOND TYPE=command MSG=\"action:ks_show extrude\"\n</code></pre></p> <p>Show a menu with items:</p> <p>Note</p> <p>you need to escape double quotes because they are used by MSG</p> <pre><code>RESPOND TYPE=command MSG=\"action:ks_show menu items=[{'save': {'name': 'Home', 'icon': 'home', 'panel': None, 'method': 'printer.gcode.script', 'enable': 'True', 'params': '{\\\"script\\\": \\\"G28\\\"}', 'style': None, 'confirm': None}}]\"\n</code></pre>"},{"location":"Hardware/GPIO_35/","title":"GPIO 3.5\"","text":"<p>How I installed the 3.5\" (A) type of screen on RaspberryOS Bookworm (Debian 12)</p> <p>Update: I've tested Bullseye (Debian 11) and it works, but rotation was not working</p> <p></p> <p>Disclaimer</p> <p>This is based on my own experience, and it's provided for general information and does not constitute as advice of any kind.</p>"},{"location":"Hardware/GPIO_35/#initial-install","title":"Initial install","text":"<p>This screens connect to the GPIO they were usually installed via  repositories named LCD-show (1, 2), however in the bookworm release there is a simpler solution</p> <p><pre><code>sudo nano /boot/firmware/config.txt\n</code></pre> at the bottom add: <pre><code>dtoverlay=piscreen,drm\n</code></pre></p> Info <p>in this context drm stands for Direct Rendering Manager</p> <p>I had to comment out (add # at the start) vc4 or it would boot into a blackscreen</p> <pre><code>#dtoverlay=vc4-kms-v3d\n</code></pre> <p>Close the nano editor using <code>ctrl</code>+<code>x</code> (exit), then <code>y</code> for yes (save).</p> <pre><code>sudo reboot\n</code></pre>"},{"location":"Hardware/GPIO_35/#wrong-colors-or-graphical-corruption","title":"Wrong colors or graphical corruption","text":"<p>Some screens will not behave correctly and/or display wrong colors, this usually due to the wrong SPI speed In my case the maximum I could achieve is 22.22Mhz <pre><code>dtoverlay=piscreen,drm,speed=22222222\n</code></pre></p> About speed <p>As you may predict speed has a big impact in usability as it dictates how often the display will refresh</p> <p>If i understand the involved drivers correctly, the spi speed is calculated as: <code>core_clock / core_divisor</code></p> <p>The divisor must be a multiple of 2, that ranges between 2 and 65536</p> <p>Core clock in the case of Pi 3 would be 400mhz</p> <p>So even if you can enter any number, it will be approximated to a value from that formula</p> <p>That's why I used 22.222.222 (400 / 18)</p> <p>reboot to test any changes.</p>"},{"location":"Hardware/GPIO_35/#rotation","title":"Rotation","text":"<p>You can rotate the screen adding a rotate line with the degrees [0, 90, 180, 270] <pre><code>dtoverlay=piscreen,drm,rotate=180\n</code></pre> Screen rotation will require adjusting the touch matrix see Touch issues</p> <p>Bug</p> <p>Raspberry linux Kernel v6.1.77 has a bug in the dtb and rotate doesn't work</p> <p>The fix has been merged in linux v6.6</p> <p>you can copy the dtb from the new kernel into the old one if needed</p>"},{"location":"Hardware/GPIO_35/#console","title":"Console","text":"<p>To make the console work:</p> <pre><code>sudo nano /boot/firmware/cmdline.txt\n</code></pre> <p>add at the start or end:</p> <pre><code>fbcon=map:11\n</code></pre> <p>Important</p> <p>Do not add newlines to the file,  it must be 1 line with the options separated by spaces</p>"},{"location":"Hardware/GPIO_35/#type-b-v2","title":"Type (B-v2)","text":"<p>I have tried the type (B) version 2, and it's quite different, this screen has a different initialization sequence, probably due to being IPS</p> <p>so you will need the waveshare35b-v2 dtb of the waveshare repo, to be copied into the appropriate folder:</p> <pre><code>git clone https://github.com/waveshare/LCD-show\nsudo cp LCD-show/waveshare35b-v2-overlay.dtb /boot/firmware/overlays/waveshare35b-v2.dtbo\n</code></pre> <p>the config would be something like this, another major difference is that this display will default to vertical</p> <p>the maximum speed I could achieve with mine was 33mhz (400mhz/12) without color aberration, but I ended up with 30mhz to have some margin this overlay supports an fps value, default is 30 I changed it to 60 this screen was never super responsive but with this configuration is quite tolerable in my opinion.</p> /boot/firmware/config.txt<pre><code>dtoverlay=waveshare35b-v2:rotate=270,drm,speed=30000000,fps=60\n</code></pre> example of dmesg output<pre><code>...\n[   14.926080] input: ADS7846 Touchscreen as /devices/platform/soc/3f204000.spi/spi_master/spi0/spi0.1/input/input0\n[   15.015895] fbtft: module is from the staging directory, the quality is unknown, you have been warned.\n[   15.021701] fb_ili9486: module is from the staging directory, the quality is unknown, you have been warned.\n[   15.022279] SPI driver fb_ili9486 has no spi_device_id for ilitek,ili9486\n[   15.022555] fb_ili9486 spi0.0: fbtft_property_value: regwidth = 16\n[   15.022572] fb_ili9486 spi0.0: fbtft_property_value: buswidth = 8\n[   15.022588] fb_ili9486 spi0.0: fbtft_property_value: debug = 0\n[   15.022600] fb_ili9486 spi0.0: fbtft_property_value: rotate = 270\n[   15.022615] fb_ili9486 spi0.0: fbtft_property_value: fps = 60\n[   15.022627] fb_ili9486 spi0.0: fbtft_property_value: txbuflen = 32768\n[   15.826386] graphics fb1: fb_ili9486 frame buffer, 480x320, 300 KiB video memory, 32 KiB buffer memory, fps=62, spi0.0 at 30 MHz\n...\n</code></pre> <p>by default with this configuration the output will be on the secondary framebuffer so a file must be created to address this issue:</p> /usr/share/X11/xorg.conf.d/99-fbdev.conf<pre><code>Section \"Device\"\n        Identifier      \"Allwinner A10/A13 FBDEV\"\n        Option          \"fbdev\" \"/dev/fb1\"\n        Option          \"SwapbuffersWait\" \"true\"\nEndSection\n</code></pre> <p>Tip</p> <p>notice that I'm using fbdev and not fbturbo, you can use fbturbo if you like (remember to install it)</p> <p>at this point this still did not work:</p> <p>example of /var/log/Xorg.0.log<pre><code>[   172.061] (II) LoadModule: \"modesetting\"\n[   172.061] (II) Loading /usr/lib/xorg/modules/drivers/modesetting_drv.so\n[   172.064] (II) Module modesetting: vendor=\"X.Org Foundation\"\n[   172.064]    compiled for 1.21.1.7, module version = 1.21.1\n[   172.064]    Module class: X.Org Video Driver\n[   172.064]    ABI class: X.Org Video Driver, version 25.2\n[   172.065] (II) modesetting: Driver for Modesetting Kernel Drivers: kms\n[   172.067] (WW) Falling back to old probe method for modesetting\n[   172.068] (EE) open /dev/dri/card0: No such file or directory\n[   172.068] (WW) Falling back to old probe method for modesetting\n[   172.068] (EE) open /dev/dri/card0: No such file or directory\n[   172.068] (EE) No devices detected.\n[   172.068] (EE)\nFatal server error:\n[   172.068] (EE) no screens found(EE)\n</code></pre> so I checked out the configuration and found:</p> <p>default contents of /usr/share/X11/xorg.conf.d/20-noglamor.conf<pre><code>Section \"Device\"\n    Identifier \"kms\"\n    Driver \"modesetting\"\n    Option \"AccelMethod\" \"msdri3\"\n    Option \"UseGammaLUT\" \"off\"\nEndSection\n</code></pre> did: <pre><code>sudo nano /usr/share/X11/xorg.conf.d/20-noglamor.conf\n</code></pre> deleted everything and saved.</p> <p>then removed the write permissions to prevent being regenerated: <pre><code>sudo chmod 444 /usr/share/X11/xorg.conf.d/20-noglamor.conf\n</code></pre></p> <p>at this point the screen was working, but the touchscreen needed to be rotated:</p> rules for rotation: /etc/udev/rules.d/51-touchscreen.rules<pre><code>ACTION==\"add\", ATTRS{name}==\"ADS7846 Touchscreen\", ENV{LIBINPUT_CALIBRATION_MATRIX}=\"0 1 0 -1 0 1 0 0 1\"\n</code></pre> <p>after a reboot the waveshare type b rev2 was working perfectly at this point.</p>"},{"location":"Hardware/HDMI/","title":"HDMI","text":"<p>Screens that use HDMI should work out of the box</p> <p>you may need to configure the resolution in RaspberryOS Bookworm you can do this by editing the kernel commandline</p> <pre><code>sudo nano /boot/firmware/cmdline.txt\n</code></pre> <p>Important</p> <p>Do not add newlines to the file, it must be 1 line with the options separated by spaces</p> <p>for example: <pre><code>video=1920x1080\n</code></pre></p> <p>more complex example: <pre><code>video=HDMI-A-1:1920x1080M@60,rotate=90,reflect_x\n</code></pre></p> Find the identifier use xrandr <p>on a terminal run: <pre><code>DISPLAY=:0 xrandr\n</code></pre></p> <p>it will output something like: <pre><code>Screen 0: minimum 320 x 200, current 1024 x 600, maximum 8192 x 8192\nHDMI-1 connected primary 1024x600+0+0 (normal left inverted right x axis y axis) 800mm x 450mm\n</code></pre> in this case the identifier is HDMI-1 and a simple cmdline arg would be something like:</p> <p><code>video=HDMI-1:1024x600@60</code></p> <p>Valid mode specifiers: <pre><code>&lt;xres&gt;x&lt;yres&gt;[M][R][-&lt;bpp&gt;][@&lt;refresh-rate&gt;][i][m][eDd]\n</code></pre> options on brackets are optional</p> Option Description M Calculate timings using CVT R CVT reduced blanking (refresh rate must be 60Hz) - Bits per pixel, A.K.A. BitDepth usually 24 @ acceptable refresh rates are 50, 60, 70 or 85 Hz only e Force enable D Force enable Digital mode d Disable <p>For more info read modedb default video mode support</p>"},{"location":"Panels/Job_status/","title":"Job Status","text":"<p>Also known as \"Print Status\" or the \"printing panel\" shows the relevant information of the current print.</p> <p></p> <p>Tip</p> <p>the third row shows the LCD message (<code>M117</code>)</p> <p>This panel has more information than it shows by default, just click/tap the corresponding the status buttons to access the extra information</p>"},{"location":"Panels/Job_status/#position-info","title":"Position info","text":"<p>Note</p> <p>Layer is calculated from object height, it may not be accurate if variable layer is used</p> <p>If that is the case use the Layer Progress method described in the Quicktips</p>"},{"location":"Panels/Job_status/#extrusion-info","title":"Extrusion info","text":""},{"location":"Panels/Job_status/#time-info","title":"Time info","text":""},{"location":"Panels/Job_status/#extra-temperature-items","title":"Extra temperature items","text":"<p>By default, only extruder and bed temperatures will be available but additional items can be defined using \"titlebar_items\" in the config</p>"},{"location":"Panels/Screws/","title":"Bed level","text":"<p>For this panel to appear in the menu <code>[bed_screws]</code> or <code>[screws_tilt_adjust]</code> need to be defined in Klipper config (printer.cfg)</p> <p>Important</p> <ul> <li><code>[bed_screws]</code> uses nozzle positions (nozzle above the screw) Read Klipper doc entry</li> <li><code>[screws_tilt_adjust]</code> uses probe positions (probe above the screw) Read Klipper doc entry</li> </ul> <p>The corner buttons in KlipperScreen place the nozzle above the screw to do the \"paper test\".</p> <p>When <code>[screws_tilt_adjust]</code> is defined a couple of things happen:</p> <ul> <li>A button named \"Screws adjust\" appears, it runs <code>SCREWS_TILT_CALCULATE</code> when is pressed, and reports the amount to be adjusted into the labels of the corner buttons.</li> <li><code>[bed_screws]</code> is now ignored by KlipperScreen. (explained below)</li> <li>The corner buttons are now <code>[screws_tilt_adjust]</code> coordinates with the probe offset applied. (explained below)</li> </ul>"},{"location":"Panels/Screws/#why-bed_screws-are-ignorednot-used","title":"Why <code>[bed_screws]</code> are ignored/not used?","text":"<p><code>[screws_tilt_adjust]</code> positions with offset will be used over <code>[bed_screws]</code>, because if the probe offset is changed or the difference between <code>[bed_screws]</code> and <code>[screws_tilt_adjust]</code> wasn't calculated correctly, the \"Screws adjust\" button stops working correctly.</p>"},{"location":"Panels/Screws/#why-the-probe-offset-is-applied-to-screws_tilt_adjust","title":"Why the probe offset is applied to <code>[screws_tilt_adjust]</code>?","text":"<p>Because the corner buttons in KlipperScreen should place the nozzle above the screw to do the \"paper test\". It doesn't affect the function of <code>SCREWS_TILT_CALCULATE</code>, which will go to the defined positions.</p>"},{"location":"Panels/Screws/#is-bed_screws_adjust-supported","title":"Is <code>BED_SCREWS_ADJUST</code> supported?","text":"<p>No, but you can achieve the same thing by using the corner buttons and going in a circle pattern adjusting until desired. <code>BED_SCREWS_ADJUST</code> is just a helper that moves to the screws in sequence</p>"},{"location":"Panels/Screws/#limitations","title":"Limitations","text":"<p>The panel doesn't support more than 9 screws or grids bigger than 3x3.</p>"},{"location":"Panels/Screws/#rotation","title":"Rotation","text":"<p>The layout can be rotated if the screen is not directly in front of the machine. in the printer configuration you would add screw_rotation: 90 Valid values are 0 90 180 270</p>"},{"location":"Panels/Screws/#inversion","title":"Inversion","text":"<p>The layout will be inverted if an axis is inverted in the move panel</p>"},{"location":"Panels/Screws/#is-there-an-alternative","title":"Is there an alternative?","text":"<p>If you have a reliable probe, define <code>[bed_mesh]</code> in Klipper config, remove the springs and use some thread-locker or locking nuts to fix the bed to the gantry, let the probe do a mesh save it and forget about this.</p>"},{"location":"Panels/Temperature/","title":"Temperature","text":"<p>This panel is available when there is at least one device with a temperature sensor associated, this includes extruders, heaters, sensors and temperature_fans.</p> <p>There are 3 main modes of operation:</p>"},{"location":"Panels/Temperature/#preheat","title":"Preheat","text":"<p>Define profiles to quickly change the target temperature of multiple selected devices. This is the default mode when not printing.</p> <p></p>"},{"location":"Panels/Temperature/#delta-adjust","title":"Delta adjust","text":"<p>Change the target of the selected devices, the amount is selectable. This is the default mode while printing</p> <p></p>"},{"location":"Panels/Temperature/#direct-input-with-keypad","title":"Direct input with keypad","text":"<p>Allows to set the exact temperature using the keypad.</p> <p></p>"},{"location":"Panels/Zcalibrate/","title":"Zcalibrate","text":"<p>This panel supports various modes of operation to assist in the calibration of the Z axis of the machine. It's strongly suggested to read Klipper documentation about Bed level</p> <p></p>"},{"location":"Panels/Zcalibrate/#buttons","title":"Buttons","text":"<ul> <li>\"Start\" will initiate the only method available, or ask the user if multiple methods are available.</li> </ul> <p>Note</p> <p>KlipperScreen will automatically Home(<code>G28</code>) if needed</p> <ul> <li>The raise(+) and lower(-) buttons send <code>TESTZ Z=distance</code> where distance is selected in the bottom row.</li> <li>Accept will send <code>ACCEPT</code></li> <li>Abort will send <code>ABORT</code></li> </ul>"},{"location":"Panels/Zcalibrate/#calibration-methods","title":"Calibration methods","text":""},{"location":"Panels/Zcalibrate/#probe-probe_calibrate","title":"Probe (<code>PROBE_CALIBRATE</code>)","text":"<p>Available when a probe is defined. (BL-Touch is a probe)</p> <p>KlipperScreen will try to position the probe in the correct place before sendind a <code>PROBE_CALIBRATE</code></p> Search order to select location <ol> <li><code>calibrate_x_position</code> and <code>calibrate_y_position</code> in KlipperScreen.conf Both need to be configured, probe offsets are not applied. This is considered an override</li> <li>Probe at the zero reference position of the mesh</li> <li>If <code>[safe_z_home]</code> is defined, those values are used. Unless <code>Z_ENDSTOP_CALIBRATE</code> is available. In other words, only use <code>[safe_z_home]</code> if <code>z_virtual_endstop</code> is used</li> <li>If the kinematics are <code>delta</code> probe is placed at 0, 0</li> <li>Probe at the center of the <code>bed_mesh</code></li> <li>Probe at the center of the axes (<code>position_max</code> / 2)</li> </ol> <p>Klipper documentation: Calibrating probe Z offset</p>"},{"location":"Panels/Zcalibrate/#endstop-z_endstop_calibrate","title":"Endstop (<code>Z_ENDSTOP_CALIBRATE</code>)","text":"<p>Available when a physical endstop is defined for <code>[stepper_z]</code></p> <p>Klipper documentation: Calibrating a Z endstop</p>"},{"location":"Panels/Zcalibrate/#bed-mesh-bed_mesh_calibrate","title":"Bed mesh (<code>BED_MESH_CALIBRATE</code>)","text":"<p>Available when a probe is not defined and <code>[bed_mesh]</code> is defined</p> <p>this mode lets you create a mesh leveling bed using the paper test in various points.</p> <p>Warning</p> <p>DO NOT adjust the bed screws while using this mode.</p> <p>Adjust the screws using the bed screws panel before running this tool.</p>"},{"location":"Panels/Zcalibrate/#delta-automaticmanual-delta_calibrate","title":"Delta Automatic/Manual (<code>DELTA_CALIBRATE</code>)","text":"<p>Available when the kinematics are defined as delta.</p> <p>Klipper documentation: Delta calibration</p>"},{"location":"Panels/Zcalibrate/#axis-twist-compensation-axis_twist_compensation_calibrate","title":"Axis Twist Compensation (<code>AXIS_TWIST_COMPENSATION_CALIBRATE</code>)","text":"<p>Available when <code>[axis_twist_compensation]</code> is defined in the Klipper configuration.</p> <p>Klipper documentation: Axis Twist Compensation</p>"},{"location":"Troubleshooting/Desktop/","title":"Desktop","text":""},{"location":"Troubleshooting/Desktop/#check-if-you-have-a-desktop-environment","title":"Check if You Have a Desktop Environment","text":"<ol> <li>Let you device finish startup</li> <li>At the end of the boot process look at the screen and check using this examples</li> </ol> Desktop environment Console Desktop environment Console <p>If you installed a desktop (GUI version) of the OS and want to run KlipperScreen exclusively then do: Boot to console / KlipperScreen<pre><code>sudo systemctl set-default multi-user.target &amp;&amp; sudo reboot\n</code></pre> to undo and go back to the desktop environment: Boot to the desktop<pre><code>sudo systemctl set-default graphical.target &amp;&amp; sudo reboot\n</code></pre></p>"},{"location":"Troubleshooting/FBturbo/","title":"FBturbo failing with undefined symbol","text":"<p>in the system log this appears:</p> <p>Log</p> <pre><code>xinit[948]: /usr/lib/xorg/Xorg: symbol lookup error: /usr/lib/xorg/modules/drivers/fbturbo_drv.so: undefined symbol: shadowUpdatePackedWeak\n</code></pre> <p>Your system doesn't seem compatible with the FBturbo driver that you have installed</p> <p>Remove the fbturbo driver</p> <pre><code>sudo apt purge xserver-xorg-video-fbturbo\n</code></pre> <p>make sure the config is removed:</p> <pre><code>sudo rm /usr/share/X11/xorg.conf.d/99-fbturbo.conf\n</code></pre>"},{"location":"Troubleshooting/Framebuffer/","title":"Screen is using the wrong framebuffer","text":"<p>If you have multiple framebuffers, you may need to fix the X11 configuration, list the available framebuffers and check the current one:</p> <pre><code>ls /dev/fb*\n</code></pre> <p>Output example</p> <pre><code>pi@raspberrypi ~ $ ls /dev/fb*\n/dev/fb0 /dev/fb1\n</code></pre> <p>Critical</p> <p>if you only see one, for example <code>/dev/fb0</code> then this is not the issue. Go to Troubleshooting</p>"},{"location":"Troubleshooting/Framebuffer/#use-fbcp-to-copy-from-one-framebuffer-to-the-other","title":"Use fbcp to copy from one framebuffer to the other","text":"<pre><code>cd\ngit clone https://github.com/tasanakorn/rpi-fbcp.git\ncd rpi-fbcp\nmkdir build\ncd build\ncmake ..\nmake\nsudo install fbcp /usr/local/bin/fbcp\nsudo wget -O /etc/init.d/fbcp https://gist.github.com/notro/eac0fec51cac67bb99c7/raw/4804a36459db10b17d35451d98d4573a045084be/fbcp\nsudo chmod +x /etc/init.d/fbcp\nsudo update-rc.d fbcp defaults\nsudo reboot\n</code></pre>"},{"location":"Troubleshooting/Framebuffer/#manually-change-the-framebuffer","title":"Manually change the framebuffer","text":"<p>the file specifying the framebuffer could be:</p> <ul> <li>99-fbturbo.conf</li> <li>99-fbusb.conf</li> <li>99-fbdev.conf</li> </ul> <p>check if one of those or similar exist with:</p> <pre><code>ls /usr/share/X11/xorg.conf.d/\n</code></pre> <p>Example</p> <p>you found 99-fbdev.conf:</p> <p><pre><code>sudo nano /usr/share/X11/xorg.conf.d/99-fbdev.conf\n</code></pre> 99-fbdev.conf<pre><code>Section \"Device\"\n        Identifier      \"Allwinner A10/A13/A20 FBDEV\"\n        Driver          \"fbdev\"\n        Option          \"fbdev\" \"/dev/fb0\"\n        Option          \"SwapbuffersWait\" \"true\"\nEndSection\n</code></pre></p> <p>since <code>ls /dev/fb*</code> returned <code>/dev/fb0 /dev/fb1</code> change it to <code>/dev/fb1</code></p> <p>Save the file, restart KlipperScreen.</p> <pre><code>sudo service KlipperScreen restart\n</code></pre>"},{"location":"Troubleshooting/Framebuffer_id/","title":"Troubleshooting Framebuffer Issues","text":"<p>Here are some solutions if this line is in the logs: <pre><code>(EE) Cannot run in framebuffer mode. Please specify busIDs for all framebuffer devices\n</code></pre></p> <p>Raspberry Pi</p> <p>This has been known to happen on RaspberryOS Bookworm Lite on Pi5.</p> <p>Later versions of the OS fixed the issue.</p> <p><pre><code>sudo nano /etc/X11/xorg.conf.d/99-v3d.conf\n</code></pre> Paste this into the file: <pre><code>Section \"OutputClass\"\n  Identifier \"vc4\"\n  MatchDriver \"vc4\"\n  Driver \"modesetting\"\n  Option \"PrimaryGPU\" \"true\"\nEndSection\n</code></pre> Reboot.</p> <p>Generic</p> <p>This will heavily vary with different hardware. Find the correct busID and create a config like:</p> <p><pre><code>sudo nano /etc/X11/xorg.conf.d/99-busid.conf\n</code></pre> Paste this into the file: <pre><code>Section \"Device\"\n    Identifier \"Card0\"\n    Driver \"fbdev\"\n    BusID \"pci:1:0:0\"\nEndSection\n</code></pre> Where the busID in this example is the first pci card. You will have to find the identifier and id of the video output device using tools like: <pre><code>lspci\n</code></pre> Or sometimes with: <pre><code>lshw\n</code></pre></p> <p>If you find a solution not listed here, please consider contributing with the information.</p>"},{"location":"Troubleshooting/Last_resort/","title":"Last Resort to Make the Screen Work","text":"<p>If your screen never shows the console or bootup text during startup, it is typically due to an improperly installed screen. See Physical Install Issues for more information.</p> <p></p> <p>If the screen shows the bootup text but ends with a blinking cursor or login prompt, and no matter what you tried in Troubleshooting you can't make it work, then follow these steps:</p> <ol> <li> <p>Install a Distro with a Desktop Environment Click to learn how to check</p> </li> <li> <p>Ensure Proper Functionality    Make sure the screen is working properly, including both display and touch functionality.</p> </li> <li> <p>Deactivate the Desktop Environment for KlipperScreen    To allow KlipperScreen to run exclusively, enter the following command in a terminal and press enter:    <pre><code>sudo systemctl set-default multi-user.target &amp;&amp; sudo reboot\n</code></pre></p> </li> <li> <p>Reboot and Install KlipperScreen    Wait for the system to reboot and then proceed to install KlipperScreen.</p> </li> </ol> <p>If it still doesn't work, or if you did something else to make it work and want to share your solution:</p> <p>Contact Us</p> <p>Remember to share the logs, as they are crucial for troubleshooting.</p>"},{"location":"Troubleshooting/Network/","title":"Network","text":"<p>The network panel relies on Network-Manager for its operation.</p> <p>Note for Forks</p> <p>The network panel's behavior and dependencies may differ. Please refer to your specific fork documentation or support resources for instructions tailored to your setup.</p>"},{"location":"Troubleshooting/Network/#loss-of-connection-after-installing-network-manager","title":"Loss of Connection After Installing Network-Manager","text":"<p>If you lose network connection after installing Network-Manager, follow these steps to reconnect:</p>"},{"location":"Troubleshooting/Network/#reconnect-using-klipperscreen","title":"Reconnect using KlipperScreen","text":"<ul> <li>Go to the network panel in KlipperScreen:</li> <li>Access the network panel in KlipperScreen and select your Wi-Fi network to reconnect.</li> </ul> <p>Alternative: using the console</p> <ul> <li> <p>Option 1: Switch to a local console with keyboard:</p> <ol> <li>Use <code>Ctrl + Alt + F1</code> (or other function keys up to F6) to access a virtual terminal.</li> <li>Log in and run <code>nmtui</code> to manage Wi-Fi connections directly from the console.</li> </ol> </li> <li> <p>Option 2: Connect a LAN cable for SSH access:</p> <ol> <li>Use SSH to remotely connect to your system.</li> <li>Run <code>nmtui</code> to manage your network connections.</li> </ol> </li> </ul>"},{"location":"Troubleshooting/Network/#wi-fi-networks-not-listed","title":"Wi-Fi networks not listed","text":"<p>The initial scan may take a while, first be patient before assuming it's an issue. and check with other tools like <code>nmtui</code></p>"},{"location":"Troubleshooting/Network/#permission-error","title":"Permission error","text":"<p>Usually permissions are set with the installer, try to update and then re-run the installer and reboot</p> Alternative workaround for network-manager not having permissions <pre><code>mkdir -p /etc/NetworkManager/conf.d\nsudo nano /etc/NetworkManager/conf.d/any-user.conf\n</code></pre> <p>in the editor paste this:</p> <pre><code>[main]\nauth-polkit=false\n</code></pre> <p>Then restart the service (or reboot):</p> <pre><code>systemctl restart NetworkManager.service\nsystemctl restart KlipperScreen.service\n</code></pre>"},{"location":"Troubleshooting/Physical_Install/","title":"Physical installation issues","text":"<p>If the screen never shows the console even during startup, Then it's typically an improperly installed screen,</p> <p>Important</p> <p>It is advised follow the manufacturer instructions on how to physically connect the screen and install the proper drivers.</p>"},{"location":"Troubleshooting/Physical_Install/#cable-issues","title":"Cable issues","text":"<ul> <li>Check that the cable is inserted properly: it shouldn't be loose, and in the case of ribbon cables like DSI make sure the contacts face the right way</li> <li>If the touchscreen is connected via USB, try another port if available,   if you are using a HUB try connecting the touch directly without the HUB.</li> <li>If the board has more than one HDMI try the other port</li> </ul>"},{"location":"Troubleshooting/Physical_Install/#driver-issues","title":"Driver issues","text":"<p>Some screens need drivers installed the most common cases are:</p>"},{"location":"Troubleshooting/Physical_Install/#waveshare","title":"Waveshare","text":"<ul> <li>Waveshare Wiki</li> <li>repo LCD-show</li> </ul>"},{"location":"Troubleshooting/Physical_Install/#goodtft-genericclones","title":"Goodtft (generic/clones)","text":"<ul> <li>Goodtft Wiki</li> <li>repo LCD-show</li> </ul>"},{"location":"Troubleshooting/Rotation/","title":"Screen rotation","text":"<p>Configure the server to start in the desired orientation, there are many ways to achieve this, here are some examples:</p> <p>Warning</p> <p>Rotation is handled by the OS and not by KlipperScreen, if you can't rotate your screen it's usually an issue with the OS configuration</p>"},{"location":"Troubleshooting/Rotation/#examples-of-rotation","title":"Examples of rotation","text":"Universal xorg configuration Raspberry Pi using kernel cmdline Raspberry Pi legacy mode (works with vc4-fkms-v3d) Using a screen installed with goodtft-LCD-show Using Waveshare screen that is installed with LCD-show"},{"location":"Troubleshooting/Rotation/#universal-xorg-configuration","title":"Universal xorg configuration","text":"<p>Find the identifier use xrandr</p> <pre><code>DISPLAY=:0 xrandr\n</code></pre> <p>it will output something like: <pre><code>Screen 0: minimum 320 x 200, current 1024 x 600, maximum 8192 x 8192\nHDMI-1 connected primary 1024x600+0+0 (normal left inverted right x axis y axis) 800mm x 450mm\n</code></pre></p> <p>Take not that the screen is <code>HDMI-1</code> (it could be <code>HDMI-A-1</code> or many other names)</p> <p>Create /usr/share/X11/xorg.conf.d/90-monitor.conf <pre><code>sudo nano /usr/share/X11/xorg.conf.d/90-monitor.conf\n</code></pre> Paste this section modifying the options to suit your needs: 90-monitor.conf<pre><code>Section \"Monitor\"\n    Identifier \"HDMI-1\"\n    # This identifier would be the same as the name of the connector printed by xrandr\n    # for example  \"DVI-I-1 connected primary\" means that the identifier is \"DVI-I-1\"\n    # another example \"Unknown19-1 connected primary\" some GPIO screens identify as Unknown19\n\n    Option \"Rotate\" \"left\"\n    # Valid rotation options are normal,inverted,left,right\n\n    Option \"PreferredMode\" \"1920x1080\"\n    # May be necessary if you are not getting your preferred resolution.\nEndSection\n</code></pre> Save the file and restart KlipperScreen.</p> <pre><code>sudo service KlipperScreen restart\n</code></pre> <p>if KlipperScreen doesn't restart: <pre><code>sudo reboot\n</code></pre></p> <p>you may have to adjust the touch rotation</p>"},{"location":"Troubleshooting/Rotation/#raspberry-pi-using-kernel-cmdline","title":"Raspberry Pi using kernel cmdline","text":"<p>To set screen orientation when in console mode, you will need to edit the kernel command-line to pass the required orientation to the system.</p> <pre><code>sudo nano /boot/firmware/cmdline.txt\n</code></pre> <p>To rotate by 90 degrees clockwise, add the following to the cmdline, making sure everything is on the same line, do not add any carriage returns. Possible rotation values are 0, 90, 180 and 270.</p> <p>For example a DSI screen: <pre><code>video=DSI-1:800x480@60,rotate=90\n</code></pre></p> <p>To find the identifier on a terminal run: <pre><code>DISPLAY=:0 xrandr\n</code></pre> it will output something like:</p> <pre><code>Screen 0: minimum 320 x 200, current 1024 x 600, maximum 8192 x 8192\nHDMI-1 connected primary 1024x600+0+0 (normal left inverted right x axis y axis) 800mm x 450mm\n</code></pre> <p>in this case the identifier is HDMI-1 and a simple cmdline arg would be something like: <pre><code>video=HDMI-1:1024x600@60\n</code></pre></p> <p>To apply changes do a reboot: <pre><code>sudo reboot\n</code></pre> Read the official docs for more info</p> <p>Raspberry Display docs</p>"},{"location":"Troubleshooting/Rotation/#raspberry-pi-legacy-mode-works-with-vc4-fkms-v3d","title":"Raspberry Pi legacy mode (works with vc4-fkms-v3d)","text":"<p>add to config.txt <pre><code>display_lcd_rotate=2\n</code></pre></p> <p>To apply changes do a reboot: <pre><code>sudo reboot\n</code></pre></p> <p>Warning</p> <p>At the moment of writing Pi4 didn't support 90 and 270 degrees with this method,  see the official docs</p> Value result 0 no rotation 1 rotate 90 degrees clockwise 2 rotate 180 degrees clockwise 3 rotate 270 degrees clockwise 0x10000h horizontal flip 0x20000 vertical flip <p>Read the official docs for more info</p>"},{"location":"Troubleshooting/Rotation/#using-a-screen-installed-with-goodtft-lcd-show","title":"Using a screen installed with goodtft-LCD-show","text":"<pre><code>cd LCD-show/\nsudo ./rotate.sh 90\n</code></pre>"},{"location":"Troubleshooting/Rotation/#using-waveshare-screen-that-is-installed-with-lcd-show","title":"Using Waveshare screen that is installed with LCD-show","text":"<pre><code>cd LCD-show/\nsudo ./LCD43-show 270 lite\n</code></pre>"},{"location":"Troubleshooting/Rotation/#touchscreen-touch-rotation","title":"Touchscreen touch rotation","text":"<p>See touch rotation</p>"},{"location":"Troubleshooting/Touch_issues/","title":"Touchscreen issues","text":"<p>Contents:</p> <ul> <li>Touch not working</li> <li>Touch rotation and matrix</li> <li>Touch calibration</li> </ul> <p>Beware that this document focuses on RaspberryOS but most of it should apply to any other Debian based distros</p>"},{"location":"Troubleshooting/Touch_issues/#touch-not-working","title":"Touch not working","text":"<p>If the screen is connected over USB, the cable may cause issues. For that, please see this guide.</p> DSI screens touch not working on RaspberryOS / MainsailOS version Debian 11 Bullseye <p>Some DSI screens have issues where touch doesn't work with the default configuration. The current workaround/temporary fix involves changing the kernel driver module used for these displays.</p> <p><code>sudo nano /boot/config.txt</code> and change</p> <pre><code>dtoverlay=vc4-kms-v3d\n</code></pre> <p>to</p> <pre><code>dtoverlay=vc4-fkms-v3d\n</code></pre> <p>Close the nano editor using <code>ctrl</code>+<code>x</code> (exit), then <code>y</code> for yes (save).</p> <p>Reboot to apply changes. <code>sudo reboot</code></p> <p>If that doesn't fix it, you can try commenting these lines out, resulting in:</p> <pre><code># dtoverlay=vc4-kms-v3d\n# max_framebuffers=2\n</code></pre> <p>Reboot to apply changes. <code>sudo reboot</code></p>"},{"location":"Troubleshooting/Touch_issues/#touch-rotation-and-matrix","title":"Touch rotation and matrix","text":"<p>If the touch works but registers touch input in a different location from the input, then you may need to apply an input transformation matrix.</p> <p>First you will need your device name. On a terminal, run:</p> <pre><code>DISPLAY=:0 xinput\n</code></pre> Alternative <pre><code>libinput list-devices\n</code></pre> <p>Note</p> <p>requires libinput-tools <pre><code>sudo apt install libinput-tools\n</code></pre></p> <p>Output:</p> <pre><code>\u23a1 Virtual core pointer                          id=2    [master pointer  (3)]\n\u239c   \u21b3 Virtual core XTEST pointer                id=4    [slave  pointer  (2)]\n\u239c   \u21b3 ADS7846 Touchscreen                       id=6    [slave  pointer  (2)]\n\u23a3 Virtual core keyboard                         id=3    [master keyboard (2)]\n    \u21b3 Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]\n</code></pre> <p>In this case the device is the ADS7846 Touchscreen, yours may be different</p> <p>You can test a change by running:</p> <pre><code>DISPLAY=:0 xinput set-prop \"&lt;device name&gt;\" 'Coordinate Transformation Matrix' &lt;matrix&gt;\n</code></pre> <p>Example</p> <pre><code>DISPLAY=:0 xinput set-prop \"ADS7846 Touchscreen\" 'Coordinate Transformation Matrix' -1 0 1 0 -1 1 0 0 1\n</code></pre> <p>Where the matrix can be one of the following options:</p> Rotation Matrix 0\u00b0 <code>1 0 0 0 1 0 0 0 1</code> 90\u00b0 Clockwise <code>0 -1 1 1 0 0 0 0 1</code> 90\u00b0 Counter-Clockwise <code>0 1 0 -1 0 1 0 0 1</code> 180\u00b0 (Inverts X and Y) <code>-1 0 1 0 -1 1 0 0 1</code> invert Y <code>-1 0 1 1 1 0 0 0 1</code> invert X <code>-1 0 1 0 1 0 0 0 1</code> expand to twice the size horizontally <code>0.5 0 0 0 1 0 0 0 1</code> <p>To make the calibration permanent read Save touch calibration</p>"},{"location":"Troubleshooting/Touch_issues/#touch-calibration","title":"Touch calibration","text":"<p>This is optional, and you should only do it if you are having problems.</p> <p>Download and build xtcal:</p> <pre><code>sudo apt-get install libxaw7-dev libxxf86vm-dev libxft-dev\ncd\ngit clone https://github.com/KurtJacobson/xtcal\ncd xtcal\nmake\ncd ..\n</code></pre> <p>First you will need your touchscreen device name. On a terminal, run:</p> <pre><code>DISPLAY=:0 xinput\n</code></pre> Alternative <pre><code>libinput list-devices\n</code></pre> <p>Note</p> <p>requires libinput-tools <pre><code>sudo apt install libinput-tools\n</code></pre></p> <p>Output:</p> <pre><code>\u23a1 Virtual core pointer                          id=2    [master pointer  (3)]\n\u239c   \u21b3 Virtual core XTEST pointer                id=4    [slave  pointer  (2)]\n\u239c   \u21b3 ADS7846 Touchscreen                       id=6    [slave  pointer  (2)]\n\u23a3 Virtual core keyboard                         id=3    [master keyboard (2)]\n    \u21b3 Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]\n</code></pre> <p>In this case the device is the ADS7846 Touchscreen, yours may be different</p> <p>Reset the old calibration: (set the 0\u00b0 rotation matrix: 1 0 0 0 1 0 0 0 1) <pre><code>DISPLAY=:0 xinput set-prop \"ADS7846 Touchscreen\" 'Coordinate Transformation Matrix' 1 0 0 0 1 0 0 0 1\n</code></pre> Run the calibrator - if it's not fullscreen cancel with <code>ctrl</code>+<code>c</code> and adjust geometry <pre><code>DISPLAY=:0 xtcal/xtcal -geometry 480x320\n</code></pre></p> <p>Important</p> <p>KlipperScreen or a desktop environment should be on the screen to launch the calibrator</p> <p>Touch the center of the crosses in order, they should turn white.</p> <p></p>"},{"location":"Troubleshooting/Touch_issues/#test-the-calibration","title":"Test the calibration","text":"<p>Copy the output of the calibration and test it, For example: <pre><code>DISPLAY=:0 xinput set-prop \"ADS7846 Touchscreen\" 'Coordinate Transformation Matrix' -0.016267 -0.952804 0.978336 -1.010164 0.065333 0.998316 0 0 1\n</code></pre> if it's not correct reset the matrix and run xtcal again.</p>"},{"location":"Troubleshooting/Touch_issues/#save-touch-calibration","title":"Save touch calibration","text":"<p>modify <code>/etc/udev/rules.d/51-touchscreen.rules</code>:</p> <pre><code>sudo nano /etc/udev/rules.d/51-touchscreen.rules\n</code></pre> 51-touchscreen.rules<pre><code>ACTION==\"add\", ATTRS{name}==\"&lt;device name&gt;\", ENV{LIBINPUT_CALIBRATION_MATRIX}=\"&lt;matrix&gt;\"\n</code></pre> <p>Close the nano editor using <code>ctrl</code>+<code>x</code> (exit), then <code>y</code> for yes (save).</p> <pre><code>sudo reboot\n</code></pre> <p>Example</p> <pre><code>sudo nano /etc/udev/rules.d/51-touchscreen.rules\n</code></pre> 51-touchscreen.rules<pre><code>ACTION==\"add\", ATTRS{name}==\"ADS7846 Touchscreen\", ENV{LIBINPUT_CALIBRATION_MATRIX}=\"-1 0 1 0 -1 1 0 0 1\"\n</code></pre> <p>Close the nano editor using <code>ctrl</code>+<code>x</code> (exit), then <code>y</code> for yes (save). <pre><code>sudo reboot\n</code></pre></p> <p>Alternative Example</p> <p>As an alternative if the above doesn't work:</p> <p>determine the touchscreen driver (usually libinput):</p> <pre><code>cat /var/log/Xorg.0.log\n</code></pre> example of /var/log/Xorg.0.log<pre><code>...\n(II) Using input driver 'libinput' for 'ADS7846 Touchscreen'\n...\n</code></pre> <p>if it says <code>evdev</code> instead, then change <code>libinput</code> to <code>evdev</code> below, both in the filename and in the file</p> <pre><code>sudo nano /usr/share/X11/xorg.conf.d/40-libinput.conf\n</code></pre> 40-libinput.conf<pre><code>Section \"InputClass\"\n        Identifier \"libinput touchscreen catchall\"\n        MatchIsTouchscreen \"on\"\n        MatchDevicePath \"/dev/input/event*\"\n        Driver \"libinput\"\n        Option \"TransformationMatrix\" \"0 -1 1 1 0 0 0 0 1\"\nEndSection\n</code></pre> <p>Note</p> <p>the number of the filename determines the order of loading, if you have issues check if there are other files overriding your config or just use 99-touch_calibration.conf as a name.</p> <p>Close the nano editor using <code>ctrl</code>+<code>x</code> (exit), then <code>y</code> for yes (save). <pre><code>sudo reboot\n</code></pre></p> <p>For more in-depth guidance on using Coordinate Transformation Matrices:</p> <ul> <li>Ubuntu wiki InputCoordinateTransformation</li> <li>Libinput docs</li> </ul>"},{"location":"Troubleshooting/VC_ERROR/","title":"Cannot open virtual Console","text":"<p>If you see this line in the log:</p> <p>Log</p> <pre><code>xf86OpenConsole: Cannot open virtual console 2 (Permission denied)\n</code></pre> <ul> <li>Run <code>cat /etc/X11/Xwrapper.config</code></li> </ul> <p>This should have the line <code>allowed_users=anybody</code> in it</p> <ul> <li>Run <code>cat /etc/group | grep tty</code></li> </ul> <p>If your username is not listed under that line, you need to add it with the following command:</p> <p><pre><code>usermod -a -G tty pi\n</code></pre> (if your username is not 'pi' change 'pi' to your username)</p> <p>Restart KlipperScreen: <pre><code>sudo service KlipperScreen restart\n</code></pre></p> <p>If it's still failing:</p> <p>add <code>needs_root_rights=yes</code> to <code>/etc/X11/Xwrapper.config</code>:</p> <pre><code>sudo bash -c \"echo needs_root_rights=yes&gt;&gt;/etc/X11/Xwrapper.config\"\n</code></pre> <p>Restart KlipperScreen: <pre><code>sudo service KlipperScreen restart\n</code></pre></p>"}]}